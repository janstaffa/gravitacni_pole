{"version":3,"sources":["urlList.ts","utils/doubleLinkedList.ts","utils/getPageTitle.ts","utils/getRandomPages.ts","utils/randomInt.ts","components/Game.tsx","App.tsx","index.tsx"],"names":["urlList","ListNode","value","previous","next","this","DoubleLinkedList","nodes","addNode","lastNode","length","node","push","getPageTitle","url","fetch","then","data","text","Error","_document","document","createElement","innerHTML","body","querySelector","innerText","getRandomPages","n","a","res","json","pages","query","random","response","map","page","title","replaceAll","randomInt","min","max","Math","floor","Game","useState","clickedLinks","setClickedLinks","clickedLinksRef","useRef","current","isLoading","setIsLoading","startPage","setStartPage","targetPage","setTargetPage","targetPageRef","previousPage","nextPage","currentPage","setCurrentPage","easyMode","setEasyMode","easyModeRef","gameEnded","setGameEnded","newGame","startURL","targetURL","useEffect","currentPageName","setCurrentPageName","iframe","currentIframe","iframeDocument","contentWindow","realOrigin","URL","origin","onClick","e","clickedElement","target","closestLink","closest","finalElement","tagName","dataHref","getAttribute","scrollTo","top","anchorTo","scrollIntoView","newPage","newHead","newBody","head","style","marginTop","prepend","headLinks","querySelectorAll","Array","from","forEach","link","parsed","href","window","pathname","search","appendChild","toRemove","removeSections","navBoxes","categories","el","remove","newLinks","classList","outerHTML","links","getElementsByTagName","rawHref","finalHref","hash","setAttribute","removeAttribute","addEventListener","padding","append","iframeHTML","doc","documentElement","removeEventListener","className","rel","content","innerStyle","background","width","borderRadius","color","closeOnClickOutside","position","setShow","type","checked","onChange","ref","size","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.609d4f2d.chunk.js","sourcesContent":["export const urlList = [\r\n  'https://en.wikipedia.org/wiki/Alfred_Nobel',\r\n  'https://en.wikipedia.org/wiki/Chemistry',\r\n  'https://en.wikipedia.org/wiki/Mathematics',\r\n  'https://en.wikipedia.org/wiki/France',\r\n  'https://en.wikipedia.org/wiki/Great_Britain',\r\n  'https://en.wikipedia.org/wiki/Biology',\r\n  'https://en.wikipedia.org/wiki/Geology',\r\n  'https://en.wikipedia.org/wiki/Czech_Republic',\r\n  'https://en.wikipedia.org/wiki/Warsaw_Pact',\r\n  'https://en.wikipedia.org/wiki/Soviet_Union',\r\n  'https://en.wikipedia.org/wiki/World_War_II',\r\n  'https://en.wikipedia.org/wiki/World_War_I',\r\n  'https://en.wikipedia.org/wiki/Computer',\r\n  'https://en.wikipedia.org/wiki/Copper',\r\n  'https://en.wikipedia.org/wiki/Universe',\r\n  'https://en.wikipedia.org/wiki/Earth',\r\n  'https://en.wikipedia.org/wiki/Solar_System',\r\n  'https://en.wikipedia.org/wiki/Physics',\r\n  'https://en.wikipedia.org/wiki/Semiconductor',\r\n  'https://cs.wikipedia.org/wiki/Napoleon_Bonaparte',\r\n  'https://en.wikipedia.org/wiki/Computer_programming',\r\n  'https://en.wikipedia.org/wiki/Milky_Way',\r\n  'https://en.wikipedia.org/wiki/Big_Bang',\r\n  'https://en.wikipedia.org/wiki/Matter',\r\n  'https://en.wikipedia.org/wiki/Liquid',\r\n  'https://en.wikipedia.org/wiki/Gas',\r\n  'https://en.wikipedia.org/wiki/Video_game',\r\n  'https://en.wikipedia.org/wiki/Marie_Curie',\r\n  'https://en.wikipedia.org/wiki/Google',\r\n  'https://en.wikipedia.org/wiki/Facebook',\r\n  'https://en.wikipedia.org/wiki/Bitcoin',\r\n  'https://en.wikipedia.org/wiki/Stock_market',\r\n  'https://en.wikipedia.org/wiki/Cryptography',\r\n  'https://en.wikipedia.org/wiki/Food',\r\n  'https://en.wikipedia.org/wiki/Animal',\r\n  'https://en.wikipedia.org/wiki/Dog',\r\n  'https://en.wikipedia.org/wiki/Cat',\r\n  'https://en.wikipedia.org/wiki/Microsoft',\r\n  'https://en.wikipedia.org/wiki/Chicken',\r\n  'https://en.wikipedia.org/wiki/Latin',\r\n  'https://en.wikipedia.org/wiki/Crystal',\r\n  'https://en.wikipedia.org/wiki/Hydrogen',\r\n  'https://en.wikipedia.org/wiki/Radiation',\r\n  'https://en.wikipedia.org/wiki/Chernobyl_disaster',\r\n];\r\n","class ListNode {\r\n  value: any = null;\r\n  previous: ListNode | null = null;\r\n  next: ListNode | null = null;\r\n  constructor(value: any, previous: ListNode | null, next: ListNode | null) {\r\n    this.value = value;\r\n    this.previous = previous;\r\n    this.next = next;\r\n  }\r\n}\r\n\r\nexport class DoubleLinkedList {\r\n  nodes: ListNode[] = [];\r\n  addNode = (value: any) => {\r\n    const lastNode = this.nodes[this.nodes.length - 1];\r\n    const node = new ListNode(value, lastNode, null);\r\n    this.nodes[this.nodes.length - 1].next = node;\r\n    this.nodes.push(node);\r\n    return node;\r\n  };\r\n}\r\n","export const getPageTitle = (url: string) => {\r\n  return fetch(url)\r\n    .then((data) => data.text())\r\n    .then((data) => {\r\n      if (!data) throw new Error(\"URL can't be reached.\");\r\n      const _document = document.createElement('html');\r\n      _document.innerHTML = data;\r\n\r\n      const body = _document.querySelector('body');\r\n\r\n      if (!body) return null;\r\n\r\n      const pageTitle = (\r\n        body.querySelector('#firstHeading') as HTMLHeadingElement\r\n      )?.innerText;\r\n      return pageTitle || null;\r\n    });\r\n};\r\n","export const getRandomPages = async (n: number) => {\r\n  if (n < 1) n = 1;\r\n  return await fetch(\r\n    `https://en.wikipedia.org/w/api.php?action=query&list=random&rnnamespace=0&rnlimit=${n}&format=json`\r\n  )\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      const pages = data?.query?.random as any[];\r\n      if (!pages || pages.length === 0) return;\r\n      const response = pages.map((page) => {\r\n        const title = page.title as string;\r\n        if (!title || typeof title !== 'string') return null;\r\n        return 'https://en.wikipedia.org/wiki/' + title.replaceAll(' ', '_');\r\n      });\r\n      if (!response || response.length === 0) return;\r\n      return response;\r\n    });\r\n};\r\n","export const randomInt = (min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { Popup } from 'react-tiny-modals';\r\nimport { urlList } from '../urlList';\r\nimport { DoubleLinkedList } from '../utils/doubleLinkedList';\r\nimport { getPageTitle } from '../utils/getPageTitle';\r\nimport { getRandomPages } from '../utils/getRandomPages';\r\nimport { randomInt } from '../utils/randomInt';\r\n\r\ninterface Page {\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\ninterface CurrentPage {\r\n  url: string;\r\n  previousPage: CurrentPage | null;\r\n  nextPage: CurrentPage | null;\r\n}\r\n\r\nconst Game: React.FC = () => {\r\n  const [clickedLinks, setClickedLinks] = useState<number>(0);\r\n  const clickedLinksRef = useRef<number>(clickedLinks);\r\n  clickedLinksRef.current = clickedLinks;\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [startPage, setStartPage] = useState<Page>();\r\n  const [targetPage, setTargetPage] = useState<Page>();\r\n  const targetPageRef = useRef<Page>();\r\n  targetPageRef.current = targetPage;\r\n  const [currentPage, setCurrentPage] = useState<CurrentPage>({\r\n    url: '',\r\n    previousPage: null,\r\n    nextPage: null,\r\n  });\r\n\r\n  const [easyMode, setEasyMode] = useState<boolean>(false);\r\n  const easyModeRef = useRef<boolean>(easyMode);\r\n  easyModeRef.current = easyMode;\r\n\r\n  const [gameEnded, setGameEnded] = useState<boolean>(false);\r\n  const newGame = () => {\r\n    if (isLoading) return;\r\n    setGameEnded(false);\r\n\r\n    getRandomPages(2).then((pages) => {\r\n      let startURL = urlList[randomInt(0, urlList.length - 1)];\r\n      if (pages?.[0] && !easyModeRef.current) {\r\n        startURL = pages[0];\r\n      }\r\n      getPageTitle(startURL).then((title) => {\r\n        if (title) {\r\n          setStartPage({ url: startURL, title });\r\n          setClickedLinks(0);\r\n        }\r\n      });\r\n\r\n      let targetURL = pages?.[1];\r\n      if (!pages?.[1] || targetURL === startURL || easyModeRef.current) {\r\n        do {\r\n          targetURL = urlList[randomInt(0, urlList.length - 1)];\r\n        } while (targetURL === startURL);\r\n      }\r\n      getPageTitle(targetURL!).then((title) => {\r\n        if (title) {\r\n          setTargetPage({ url: targetURL!, title });\r\n        }\r\n      });\r\n      setCurrentPage({\r\n        url: startURL,\r\n        nextPage: null,\r\n        previousPage: null,\r\n      });\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    newGame();\r\n  }, []);\r\n\r\n  const [currentPageName, setCurrentPageName] = useState<string>('');\r\n\r\n  const iframe = useRef<HTMLIFrameElement>(null);\r\n\r\n  const pageHistory = useRef<DoubleLinkedList>();\r\n  pageHistory.current = new DoubleLinkedList();\r\n  useEffect(() => {\r\n    if (currentPage.url === targetPageRef.current?.url) {\r\n      setGameEnded(true);\r\n      return;\r\n    }\r\n\r\n    if (!currentPage.url) return;\r\n    setIsLoading(true);\r\n    const currentIframe = iframe.current;\r\n\r\n    const iframeDocument = currentIframe?.contentWindow?.document;\r\n    if (!iframeDocument) return;\r\n    const realOrigin = new URL(currentPage.url).origin;\r\n    const onClick = (e: Event) => {\r\n      const clickedElement = e.target as Element;\r\n      const closestLink = clickedElement.closest('a');\r\n      if (!clickedElement && !closestLink) return;\r\n      let finalElement = clickedElement;\r\n      if (!(clickedElement.tagName === 'A')) {\r\n        if (!closestLink) return;\r\n        finalElement = closestLink;\r\n      }\r\n      const dataHref = finalElement.getAttribute('data-href');\r\n      if (!dataHref || dataHref === '/') return;\r\n      if (dataHref[0] === '#') {\r\n        const anchorTo = iframeDocument.querySelector(dataHref);\r\n        if (anchorTo) {\r\n          anchorTo.scrollIntoView();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setClickedLinks(clickedLinksRef.current + 1);\r\n      setCurrentPage({\r\n        url: realOrigin + dataHref,\r\n        previousPage: currentPage,\r\n        nextPage: null,\r\n      });\r\n      currentIframe?.contentWindow?.scrollTo({ top: 0 });\r\n    };\r\n    fetch(currentPage.url)\r\n      .then((data) => data.text())\r\n      .then((data) => {\r\n        const _document = document.createElement('html');\r\n        _document.innerHTML = data;\r\n\r\n        const newPage = document.createElement('html');\r\n        const newHead = document.createElement('head');\r\n        const newBody = document.createElement('body');\r\n        const head = _document.querySelector('head');\r\n        const title = _document.querySelector(\r\n          '#firstHeading'\r\n        ) as HTMLHeadingElement;\r\n        const body = _document.querySelector('#bodyContent');\r\n\r\n        if (!head || !body) return;\r\n\r\n        if (title) {\r\n          title.style.marginTop = '0';\r\n          newBody.prepend(title);\r\n          setCurrentPageName(title.innerText);\r\n        }\r\n        const headLinks = head.querySelectorAll(\r\n          'link[rel=\"stylesheet\"]'\r\n        ) as NodeListOf<HTMLLinkElement>;\r\n        if (headLinks) {\r\n          const origin = new URL(currentPage.url).origin;\r\n          Array.from(headLinks).forEach((link) => {\r\n            const parsed = new URL(link.href);\r\n            if (parsed.origin !== window.origin) return;\r\n            link.href = origin + parsed.pathname + parsed.search;\r\n          });\r\n        }\r\n        newHead.appendChild(head);\r\n\r\n        const toRemove: Element[] = [];\r\n        const removeSections = body.querySelectorAll('.mw-editsection');\r\n        toRemove.push(...Array.from(removeSections));\r\n        const navBoxes = body.querySelectorAll('.navbox, .navbox2');\r\n        toRemove.push(...Array.from(navBoxes));\r\n        const categories = body.querySelector('#catlinks');\r\n        if (categories) {\r\n          toRemove.push(categories);\r\n        }\r\n        if (toRemove && toRemove.length > 0) {\r\n          toRemove.forEach((el) => el.remove());\r\n        }\r\n\r\n        const newLinks = body.querySelectorAll('a.new');\r\n        Array.from(newLinks).forEach((el) => {\r\n          el.classList.remove('new');\r\n          el.outerHTML = '<span>' + el.innerHTML + '</span>';\r\n        });\r\n        const links = body.getElementsByTagName('a');\r\n        if (links) {\r\n          Array.from(links).forEach((link) => {\r\n            const rawHref = link.getAttribute('href');\r\n            if (!link.href || !rawHref) return;\r\n            const parsed = new URL(link.href);\r\n\r\n            let finalHref = parsed.pathname + parsed.search;\r\n            if (parsed.hash && rawHref[0] === '#') {\r\n              finalHref = parsed.hash;\r\n            }\r\n            if (parsed.origin !== window.origin) {\r\n              link.outerHTML = '<span>' + link.innerHTML + '</span>';\r\n              return;\r\n            }\r\n            link.setAttribute('data-href', finalHref);\r\n            link.removeAttribute('href');\r\n          });\r\n          iframeDocument.addEventListener('click', onClick);\r\n        }\r\n\r\n        newBody.appendChild(body);\r\n        newBody.style.padding = '10px';\r\n        newPage.append(newHead, newBody);\r\n\r\n        if (!newPage) return;\r\n        const iframeHTML =\r\n          currentIframe?.contentWindow?.document.querySelector('html');\r\n        if (!iframeHTML) return;\r\n        iframeHTML.innerHTML = newPage.outerHTML;\r\n        setIsLoading(false);\r\n      });\r\n\r\n    return () => {\r\n      const doc = currentIframe?.contentWindow?.document.documentElement;\r\n      if (doc) {\r\n        doc.innerHTML = '';\r\n      }\r\n      iframeDocument?.removeEventListener('click', onClick);\r\n    };\r\n  }, [currentPage]);\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"tool-bar\">\r\n        <table className=\"info-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td>Start:</td>\r\n              <td>\r\n                <b>\r\n                  <a href={startPage?.url} target=\"_blank\" rel=\"noreferrer\">\r\n                    {startPage?.title}\r\n                  </a>\r\n                </b>\r\n              </td>\r\n            </tr>\r\n\r\n            <tr>\r\n              <td>Target:</td>\r\n              <td>\r\n                <b>\r\n                  <a href={targetPage?.url} target=\"_blank\" rel=\"noreferrer\">\r\n                    {targetPage?.title}\r\n                  </a>\r\n                </b>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div className=\"game-options\">\r\n          <div className=\"easy-mode-wrap\">\r\n            <Popup\r\n              content={() => (\r\n                <div>\r\n                  Pages get chosen from a limited list of Wikipedia articles.\r\n                </div>\r\n              )}\r\n              innerStyle={{\r\n                background: '#fff',\r\n                width: '200px',\r\n                padding: '5px',\r\n                borderRadius: '5px',\r\n                color: '#000',\r\n              }}\r\n              closeOnClickOutside={true}\r\n              position={'top'}\r\n            >\r\n              {({ setShow }) => (\r\n                <label\r\n                  onClick={() => setShow(true)}\r\n                  className=\"easy-mode-label\"\r\n                >\r\n                  easy mode\r\n                </label>\r\n              )}\r\n            </Popup>\r\n            <input\r\n              type=\"checkbox\"\r\n              onClick={newGame}\r\n              checked={easyMode}\r\n              onChange={(e) => setEasyMode(e.target.checked)}\r\n            />\r\n          </div>\r\n          <button\r\n            onClick={() => newGame()}\r\n            className=\"new-game-btn\"\r\n            title=\"Generate a new game\"\r\n          >\r\n            New game\r\n          </button>\r\n          <div className=\"link-counter\">\r\n            Links: <b>{clickedLinks}</b>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"game\">\r\n        <div className=\"game-bar\">\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                if (isLoading) return;\r\n                currentPage.previousPage &&\r\n                  setCurrentPage({\r\n                    ...currentPage.previousPage,\r\n                    nextPage: currentPage,\r\n                  });\r\n              }}\r\n              title=\"Go back in history\"\r\n            >\r\n              &lt;\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                if (isLoading) return;\r\n                currentPage.nextPage && setCurrentPage(currentPage.nextPage);\r\n              }}\r\n              title=\"Go forward in history\"\r\n            >\r\n              &gt;\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <b>{currentPageName}</b>\r\n          </div>\r\n        </div>\r\n        <div className=\"game-wrap\">\r\n          <iframe\r\n            className={\r\n              'game-window' + (isLoading || gameEnded ? ' hidden' : '')\r\n            }\r\n            ref={iframe}\r\n            title=\"game window\"\r\n          />\r\n\r\n          {gameEnded && (\r\n            <div className=\"end-screen\">\r\n              <h2>You won!</h2>\r\n              <div>clicked links: {clickedLinks}</div>\r\n              <div>start: {startPage?.title}</div>\r\n              <div>target: {targetPage?.title}</div>\r\n\r\n              <button onClick={() => newGame()} className=\"new-game-btn\">\r\n                Play again\r\n              </button>\r\n            </div>\r\n          )}\r\n          {isLoading && <ClipLoader color=\"#ffff\" size=\"60\" />}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './components/Game';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <div className=\"app-wrap\">\n        <div className=\"main-title\">\n          <h1>WikiCrawler</h1>\n          <p>Click through Wikipedia links to get to the target page.</p>\n        </div>\n        <Game />\n        <div className=\"credits\">\n          by <a href=\"https://janstaffa.cz\">janstaffa</a>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}