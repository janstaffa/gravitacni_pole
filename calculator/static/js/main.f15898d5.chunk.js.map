{"version":3,"sources":["graph.ts","utils/random.ts","components/DocsModal.tsx","components/GraphItem.tsx","components/GraphList.tsx","components/Canvas.tsx","App.tsx","index.tsx"],"names":["ZOOM_LIMIT","Graph","canvas","ctx","graphDimensions","_squareSize","_center","quadrons","graphs","pointsPerSquare","zoomRatio","initialize","x","width","y","height","drawGrid","drawAxis","calculateQuadrons","center","centerX","centerY","canvasWidth","canvasHeight","quadronWidths","positive","Math","ceil","squareSize","negative","quadronHeights","exactRatio","roundedRatio","round","step","strokeStyle","entries","idx","quadron","i","j","lineWidth","multiplier","strokeRect","k","beginPath","moveTo","lineTo","stroke","font","fillStyle","showDecimals","abs","realPos","fillText","toString","length","drawGraph_","graph","data","color","point","solveExpressionForX","expression","Parser","evaluate","toLowerCase","useRadians","e","isInInterval","number","interval","replace","Number","isInteger","firstChar","lastChar","inside","slice","split","intervalStart","parseFloat","intervalEnd","getPointsFromExpression","functionData","negativeWidth","max","positiveWidth","isNaN","push","drawGraph","newGraph","clearGraph","clearRect","rerenderGraph","updatedGraph","moveGraph","xDelta","yDelta","zoomGraph","zoomDelta","newSquareSize","deltaX","deltaY","squaresX","squaresY","differenceX","differenceY","moveGraphAbsolute","resetZoom","getRelativeCoordsFromAbsolute","absX","absY","showFunctionValuesAtPos","relativeCoords","value","toFixed","fillRect","resizeGraph","newWidth","newHeight","getContext","translate","this","randomIntInc","min","floor","random","randomRGBColor","r","g","b","DocsModal","isOpen","setIsOpen","onClickOutside","className","onClick","href","target","GraphItem","setGraphInputs","updateGraph","updatedGraphInputs","useState","showIntervalInput","setShowIntervalInput","enabled","style","backgroundColor","id","type","onChange","spellCheck","placeholder","splice","GraphList","map","graphInput","Canvas","useRef","graphInputs","graphInputsRef","current","addGraphRef","window","innerWidth","toolboxOpen","setToolBoxOpen","graphDetail","setGraphDetail","setRelativeCoords","showValueAtX","setShowValueAtX","showValueAtXRef","isDocsModalOpen","setIsDocsModalOpen","useEffect","innerHeight","dragging","addEventListener","stopDrag","classList","remove","add","movementX","movementY","relCoords","prevTouch","stopTouch","touch","touches","pageX","pageY","filter","visibility","lastGraph","newGraphInput","ref","parseInt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f15898d5.chunk.js","sourcesContent":["// import { Parser } from 'expr-eval';\r\n\r\nimport Parser from 'expression-parser';\r\n\r\nconst SQUARE_BORDER_COLOR = '#000';\r\nconst AXIS_COLOR = '#666';\r\nexport const DEFAULT_POINTS_PER_SQUARE = 20;\r\nconst DEFAULT_SQUARE_SIZE = 42;\r\n\r\nexport const ZOOM_LIMIT = {\r\n  MAX: 200,\r\n  MIN: 10,\r\n};\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\nexport interface GraphFunction {\r\n  expression: string;\r\n  data: Point[];\r\n  color: string;\r\n  interval: string;\r\n}\r\nexport class Graph {\r\n  private ctx: CanvasRenderingContext2D | null = null;\r\n  private graphDimensions: { width: number; height: number } | null = null;\r\n  private _squareSize: number = DEFAULT_SQUARE_SIZE;\r\n  private _center: Point | null = null;\r\n  private quadrons: { width: number; height: number }[] | null = [];\r\n  private graphs: Pick<GraphFunction, 'expression' | 'color' | 'interval'>[] =\r\n    [];\r\n  pointsPerSquare: number = DEFAULT_POINTS_PER_SQUARE;\r\n  private zoomRatio: number = 1;\r\n\r\n  get squareSize() {\r\n    return this._squareSize;\r\n  }\r\n  get center() {\r\n    return this._center;\r\n  }\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    const ctx = canvas.getContext('2d');\r\n    ctx?.translate(0.5, 0.5);\r\n    this.ctx = ctx;\r\n    const { width, height } = canvas;\r\n    this.graphDimensions = {\r\n      width,\r\n      height,\r\n    };\r\n  }\r\n\r\n  initialize = () => {\r\n    if (!this.ctx || !this.graphDimensions) return false;\r\n    if (!this._center) {\r\n      this._center = {\r\n        x: this.graphDimensions.width / 2,\r\n        y: this.graphDimensions.height / 2,\r\n      };\r\n    }\r\n\r\n    this.drawGrid(this._center);\r\n    this.drawAxis(this._center);\r\n    return true;\r\n  };\r\n\r\n  private calculateQuadrons = (center: Point) => {\r\n    if (!this.ctx || !center || !this.graphDimensions) return null;\r\n    const { x: centerX, y: centerY } = center;\r\n    const { width: canvasWidth, height: canvasHeight } = this.graphDimensions;\r\n\r\n    const quadronWidths = {\r\n      positive: Math.ceil((canvasWidth - centerX) / this.squareSize),\r\n      negative: Math.ceil(centerX / this.squareSize),\r\n    };\r\n    const quadronHeights = {\r\n      positive: Math.ceil(centerY / this.squareSize),\r\n      negative: Math.ceil((canvasHeight - centerY) / this.squareSize),\r\n    };\r\n\r\n    return [\r\n      {\r\n        width: centerX > 0 ? quadronWidths.negative : 0,\r\n        height: centerY > 0 ? quadronHeights.positive : 0,\r\n      },\r\n      {\r\n        width: centerX < canvasWidth ? quadronWidths.positive : 0,\r\n        height: centerY > 0 ? quadronHeights.positive : 0,\r\n      },\r\n      {\r\n        width: centerX > 0 ? quadronWidths.negative : 0,\r\n        height: centerY < canvasHeight ? quadronHeights.negative : 0,\r\n      },\r\n      {\r\n        width: centerX < canvasWidth ? quadronWidths.positive : 0,\r\n        height: centerY < canvasHeight ? quadronHeights.negative : 0,\r\n      },\r\n    ];\r\n  };\r\n  private drawGrid = (center: Point) => {\r\n    if (!this.ctx || !center) return false;\r\n\r\n    const { x: centerX, y: centerY } = center;\r\n\r\n    this.quadrons = this.calculateQuadrons(center);\r\n\r\n    if (!this.quadrons) return false;\r\n\r\n    const exactRatio = DEFAULT_SQUARE_SIZE / this.squareSize;\r\n    const roundedRatio = Math.round(exactRatio);\r\n    this.zoomRatio = roundedRatio;\r\n    const showDecimals = roundedRatio === 0;\r\n    let step = 1;\r\n    if (showDecimals) {\r\n      this.zoomRatio = 1;\r\n      if (exactRatio > 0.25) {\r\n        step = 0.5;\r\n      } else {\r\n        step = 0.25;\r\n      }\r\n    }\r\n    this.ctx.strokeStyle = SQUARE_BORDER_COLOR;\r\n    for (const [idx, quadron] of this.quadrons.entries()) {\r\n      for (let i = 1; i <= quadron.height; i++) {\r\n        for (let j = 1; j <= quadron.width; j++) {\r\n          this.ctx.lineWidth = 1;\r\n          let x = 0,\r\n            y = 0;\r\n\r\n          const multiplier = this.zoomRatio;\r\n          switch (idx) {\r\n            case 0:\r\n              x = centerX - j * this.squareSize * multiplier;\r\n              y = centerY - i * this.squareSize * multiplier;\r\n              break;\r\n            case 1:\r\n              x = centerX + (j - 1) * this.squareSize * multiplier;\r\n              y = centerY - i * this.squareSize * multiplier;\r\n              break;\r\n            case 2:\r\n              x = centerX - j * this.squareSize * multiplier;\r\n              y = centerY + (i - 1) * this.squareSize * multiplier;\r\n              break;\r\n            case 3:\r\n              x = centerX + (j - 1) * this.squareSize * multiplier;\r\n              y = centerY + (i - 1) * this.squareSize * multiplier;\r\n              break;\r\n          }\r\n          this.ctx.strokeRect(\r\n            x,\r\n            y,\r\n            this.squareSize * multiplier,\r\n            this.squareSize * multiplier\r\n          );\r\n          if (exactRatio < 0.5) {\r\n            for (let k = 0; k < 1; k += step) {\r\n              this.ctx.lineWidth = 0.2;\r\n              this.ctx.strokeRect(\r\n                x + k * this.squareSize,\r\n                y + k * this.squareSize,\r\n                this.squareSize,\r\n                this.squareSize\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n  private drawAxis = (center: Point) => {\r\n    if (!this.ctx || !center || !this.graphDimensions) return false;\r\n    if (!this.quadrons) {\r\n      this.quadrons = this.calculateQuadrons(center);\r\n      if (!this.quadrons) return false;\r\n    }\r\n    this.ctx.strokeStyle = AXIS_COLOR;\r\n    this.ctx.lineWidth = 2;\r\n\r\n    this.ctx.beginPath();\r\n    // draw X axis\r\n    this.ctx.moveTo(0, center.y);\r\n    this.ctx.lineTo(this.graphDimensions.width, center.y);\r\n    this.ctx.stroke();\r\n\r\n    // draw Y axis\r\n    this.ctx.moveTo(center.x, 0);\r\n    this.ctx.lineTo(center.x, this.graphDimensions.height);\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.font = '12px sans-serif';\r\n    this.ctx.fillStyle = '#999';\r\n\r\n    const exactRatio = DEFAULT_SQUARE_SIZE / this.squareSize;\r\n    const roundedRatio = Math.round(exactRatio);\r\n\r\n    const showDecimals = roundedRatio === 0;\r\n    let step = 1;\r\n    if (showDecimals) {\r\n      if (exactRatio > 0.25) {\r\n        step = 0.5;\r\n      } else {\r\n        step = 0.25;\r\n      }\r\n    }\r\n\r\n    for (\r\n      let i = -this.quadrons[0].width;\r\n      i < this.quadrons[1].width;\r\n      i += step\r\n    ) {\r\n      if (!showDecimals && Math.abs(i % roundedRatio) !== 0) continue;\r\n      const realPos = center.x + i * this.squareSize;\r\n\r\n      let y;\r\n      if (this.quadrons[0].height === 0) {\r\n        y = 20;\r\n      } else if (this.quadrons[2].height === 0) {\r\n        y = this.graphDimensions.height - 10;\r\n      }\r\n      if (y) {\r\n        this.ctx.fillText(i.toString(), realPos + 5, y);\r\n        continue;\r\n      }\r\n      this.ctx.fillText(i.toString(), realPos + 5, center.y + 15);\r\n    }\r\n    for (\r\n      let i = -this.quadrons[3].height;\r\n      i < this.quadrons[0].height;\r\n      i += step\r\n    ) {\r\n      if (!showDecimals && Math.abs(i % roundedRatio) !== 0) continue;\r\n      if (i === 0) continue;\r\n      const realPos = center.y - i * this.squareSize;\r\n\r\n      let x;\r\n      if (this.quadrons[0].width === 0) {\r\n        x = 5;\r\n      } else if (this.quadrons[1].width === 0) {\r\n        x = this.graphDimensions.width - 40 - i.toString().length * 5;\r\n      }\r\n      if (x) {\r\n        this.ctx.fillText(i.toString(), x, realPos + 15);\r\n        continue;\r\n      }\r\n      this.ctx.fillText(i.toString(), center.x + 5, realPos + 15);\r\n    }\r\n    return true;\r\n  };\r\n  private drawGraph_ = (graph: GraphFunction) => {\r\n    if (!this.ctx || !this._center) return false;\r\n    const { data, color } = graph;\r\n    this.ctx.strokeStyle = color;\r\n    this.ctx.lineWidth = 3;\r\n    this.ctx.beginPath();\r\n    for (const [idx, point] of data.entries()) {\r\n      const x = this._center.x + point.x * this.squareSize;\r\n      const y = this._center.y + point.y * this.squareSize;\r\n\r\n      // const prevPoint = data[idx - 1];\r\n      // if (prevPoint) {\r\n      //   const deltaX = Math.abs(point.x - prevPoint.x);\r\n      //   const midY = this.solveExpressionForX(\r\n      //     graph.expression,\r\n      //     prevPoint.x + deltaX / 2\r\n      //   );\r\n      //   if (midY !== null) {\r\n      //     const absMidY = Math.abs(midY);\r\n      //     const absPrevPointY = Math.abs(prevPoint.y);\r\n      //     const absPointY = Math.abs(point.y);\r\n      //     if (\r\n      //       (absPrevPointY <= absMidY && absMidY <= absPointY) ||\r\n      //       (absPrevPointY >= absMidY && absMidY >= absPointY)\r\n      //     ) {\r\n      //       this.ctx.lineTo(x, y);\r\n      //       continue;\r\n      //     }\r\n      //   }\r\n      // }\r\n      // this.ctx.moveTo(x, y);\r\n      this.ctx.lineTo(x, y);\r\n    }\r\n    this.ctx.stroke();\r\n    return true;\r\n  };\r\n\r\n  private solveExpressionForX = (expression: string, x: number) => {\r\n    try {\r\n      const y = Parser.evaluate(\r\n        expression.toLowerCase(),\r\n        { x },\r\n        { useRadians: true }\r\n      );\r\n      return y;\r\n    } catch (e) {\r\n      // console.error(e);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  private isInInterval = (number: number, interval: string) => {\r\n    interval = interval.toLowerCase();\r\n    interval = interval.replace(/\\s+/g, '');\r\n    switch (interval) {\r\n      // real numbers\r\n      case 'r':\r\n        return true;\r\n      // integers\r\n      case 'z':\r\n        return Number.isInteger(number);\r\n      // natural numbers x > 0\r\n      case 'n':\r\n        return number > 0;\r\n      // whole numbers x >= 0\r\n      case 'w':\r\n        return number >= 0;\r\n      default: {\r\n        if (interval.length > 0) {\r\n          const firstChar = interval[0];\r\n          const lastChar = interval[interval.length - 1];\r\n          const inside = interval.slice(1, interval.length - 1).split(/;|,/);\r\n          if (inside.length !== 2) return false;\r\n          const intervalStart = parseFloat(inside[0]);\r\n          const intervalEnd = parseFloat(inside[1]);\r\n\r\n          if (firstChar === '(') {\r\n            if (number === intervalStart) return false;\r\n          }\r\n          if (lastChar === ')') {\r\n            if (number === intervalEnd) return false;\r\n          }\r\n          if (intervalStart <= number && number <= intervalEnd) return true;\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  private getPointsFromExpression = (expression: string, interval: string) => {\r\n    if (!this.quadrons || !this._center) return null;\r\n    const functionData: Point[] = [];\r\n    const negativeWidth = Math.max(\r\n      this.quadrons[0].width,\r\n      this.quadrons[2].width\r\n    );\r\n    const positiveWidth = Math.max(\r\n      this.quadrons[1].width,\r\n      this.quadrons[3].width\r\n    );\r\n\r\n    const step = this.zoomRatio / this.pointsPerSquare;\r\n    for (let i = -negativeWidth; i < positiveWidth; i += this.zoomRatio) {\r\n      for (let j = 0; j < this.pointsPerSquare; j++) {\r\n        const x = i + j * step;\r\n        if (!this.isInInterval(x, interval)) continue;\r\n        const y = this.solveExpressionForX(expression, x);\r\n        if (\r\n          typeof y !== 'number' ||\r\n          Number.isNaN(y) ||\r\n          y > this.quadrons[0].height * this.squareSize ||\r\n          y < -this.quadrons[2].height * this.squareSize\r\n        ) {\r\n          continue;\r\n        }\r\n        // y: -y to invert x axis\r\n        functionData.push({ x, y: -y });\r\n      }\r\n    }\r\n    return functionData;\r\n  };\r\n  drawGraph = (expression: string, color: string, interval: string) => {\r\n    const functionData = this.getPointsFromExpression(expression, interval);\r\n    if (!functionData) return false;\r\n    const newGraph = { expression, data: functionData, color, interval };\r\n    this.graphs.push({ color, expression, interval });\r\n    this.drawGraph_(newGraph);\r\n    return true;\r\n  };\r\n  clearGraph = () => {\r\n    if (!this.ctx || !this.graphDimensions) return false;\r\n    this.graphs = [];\r\n    this.ctx.clearRect(\r\n      0,\r\n      0,\r\n      this.graphDimensions.width,\r\n      this.graphDimensions.height\r\n    );\r\n    this.initialize();\r\n    return true;\r\n  };\r\n\r\n  rerenderGraph = () => {\r\n    if (!this.ctx || !this._center || !this.graphDimensions) return false;\r\n    this.ctx.clearRect(\r\n      0,\r\n      0,\r\n      this.graphDimensions.width,\r\n      this.graphDimensions.height\r\n    );\r\n    this.drawGrid(this._center);\r\n    this.drawAxis(this._center);\r\n    for (const graph of this.graphs) {\r\n      const functionData = this.getPointsFromExpression(\r\n        graph.expression,\r\n        graph.interval\r\n      );\r\n      if (!functionData) return false;\r\n      const updatedGraph: GraphFunction = {\r\n        data: functionData,\r\n        ...graph,\r\n      };\r\n      this.drawGraph_(updatedGraph);\r\n    }\r\n    return true;\r\n  };\r\n  moveGraph = (xDelta: number, yDelta: number) => {\r\n    if (!this.ctx || !this._center) return false;\r\n    this._center = {\r\n      x: this._center.x + xDelta,\r\n      y: this._center.y + yDelta,\r\n    };\r\n\r\n    this.rerenderGraph();\r\n    return true;\r\n  };\r\n\r\n  zoomGraph = (\r\n    zoomDelta: number,\r\n    center: (Point | null) | undefined = this._center\r\n  ) => {\r\n    if (!this.ctx || !center || !this._center) return false;\r\n\r\n    const newSquareSize = this.squareSize + zoomDelta;\r\n    if (ZOOM_LIMIT.MIN > newSquareSize || newSquareSize > ZOOM_LIMIT.MAX) {\r\n      return false;\r\n    }\r\n    const deltaX = center.x - this._center.x;\r\n    const deltaY = center.y - this._center.y;\r\n    const squaresX = deltaX / this.squareSize;\r\n    const squaresY = deltaY / this.squareSize;\r\n    const differenceX = deltaX - squaresX * newSquareSize;\r\n    const differenceY = deltaY - squaresY * newSquareSize;\r\n\r\n    this._squareSize = newSquareSize;\r\n    //  this.rerenderGraph();\r\n    this.moveGraph(differenceX, differenceY);\r\n    return true;\r\n  };\r\n\r\n  moveGraphAbsolute = (x: number, y: number) => {\r\n    this._center = {\r\n      x,\r\n      y,\r\n    };\r\n    this.rerenderGraph();\r\n    return true;\r\n  };\r\n\r\n  resetZoom = () => {\r\n    this._squareSize = DEFAULT_SQUARE_SIZE;\r\n    this.rerenderGraph();\r\n    return true;\r\n  };\r\n\r\n  getRelativeCoordsFromAbsolute = (\r\n    absX: number,\r\n    absY: number\r\n  ): { x: number; y: number } | null => {\r\n    if (!this._center) return null;\r\n\r\n    const { x: centerX, y: centerY } = this._center;\r\n\r\n    const relX = (absX - centerX) / this.squareSize;\r\n    const relY = (centerY - absY) / this.squareSize;\r\n    return { x: relX, y: relY };\r\n  };\r\n\r\n  showFunctionValuesAtPos = (x: number, y: number): boolean => {\r\n    const relativeCoords = this.getRelativeCoordsFromAbsolute(x, 0);\r\n    if (!relativeCoords || !this.ctx || !this._center || !this.graphDimensions)\r\n      return false;\r\n\r\n    this.rerenderGraph();\r\n    for (const graph of this.graphs) {\r\n      const value = this.solveExpressionForX(\r\n        graph.expression,\r\n        relativeCoords.x\r\n      );\r\n      if (!value) continue;\r\n\r\n      this.ctx.fillText(\r\n        value.toFixed(2).toString(),\r\n        x + 15,\r\n        this._center.y - value * this.squareSize\r\n      );\r\n    }\r\n\r\n    this.ctx.fillRect(x, 0, 1, this.graphDimensions.height);\r\n    this.ctx.fillRect(0, y, this.graphDimensions.width, 1);\r\n    return true;\r\n  };\r\n  resizeGraph = (newWidth: number, newHeight: number) => {\r\n    this.graphDimensions = {\r\n      width: newWidth,\r\n      height: newHeight,\r\n    };\r\n    this.rerenderGraph();\r\n  };\r\n}\r\n","export const randomIntInc = (min: number, max: number) =>\r\n  Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\nexport const randomRGBColor = () => {\r\n  const r = randomIntInc(0, 255);\r\n  const g = randomIntInc(0, 255);\r\n  const b = randomIntInc(0, 255);\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n};\r\n","import { MdClose } from 'react-icons/md';\r\nimport { Modal } from 'react-tiny-modals';\r\nexport interface DocsModalProps {\r\n  isOpen: boolean;\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst DocsModal: React.FC<DocsModalProps> = ({ isOpen, setIsOpen }) => {\r\n  return (\r\n    <Modal isOpen={isOpen} onClickOutside={() => setIsOpen(false)}>\r\n      <div className=\"modal-close\" onClick={() => setIsOpen(false)}>\r\n        <MdClose />\r\n      </div>\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <h2>Graphing calculator</h2>\r\n          by{' '}\r\n          <a href=\"http://janstaffa.cz\" target=\"_blank\">\r\n            janstaffa\r\n          </a>\r\n          <hr />\r\n          <ul>\r\n            <li>Syntax:</li>\r\n            <p>\r\n              You can use standard math syntax for function equations. The only\r\n              available variable is 'x', which will be automatically filled in\r\n              by the calculator (example:\r\n              <code>f(x) = x-5</code>).\r\n            </p>\r\n            <li>Features:</li>\r\n            <p>\r\n              Movement. You can move around the graph by dragging your mouse. To\r\n              zoom in and out use your scroll wheel or buttons on the right.\r\n            </p>\r\n            <p>\r\n              You can create new functions by clicking the '+' button under the\r\n              function list (you can only create a new function when all current\r\n              current functions are filled in).\r\n            </p>\r\n            <p>\r\n              To temporarily hide a function from the graph click on it's color\r\n              indicator on the right of the function input.\r\n            </p>\r\n            <p>\r\n              To remove a function from the graph click on the trash icon next\r\n              to the function input.\r\n            </p>\r\n            <p>\r\n              To change the function interval click on the arrow inside the\r\n              function input. This expands another input for changing the\r\n              interval. Accepted intervals are: R(Real numbers), Z(Integers),\r\n              N(Natural numbers), W(Whole numbers), or standard math syntax\r\n              (example:\r\n              <code>x∈ &lt;2; Infinity)</code> =&gt; from 2(inclusive) to +\r\n              infinity).\r\n            </p>\r\n            <p>\r\n              Right tool bar. The top most button enables value picker mode -\r\n              displays exact y value of every function at current mouse\r\n              position. Home button returns you to 0,0 coordinates and resets\r\n              any zoom. The zoom and unzoom buttons are self explanatory.\r\n            </p>\r\n            <p>\r\n              Detail slider. This slider changes the ammount of points in\r\n              <b>one</b> square of the grid for each graph. The higher the\r\n              number, the better quality but lower performance.\r\n            </p>\r\n            <li>Functions in functions:</li>\r\n            <p>Available functions:</p>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <td>name</td>\r\n                  <td>description</td>\r\n                  <td>arguments</td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>sin</td>\r\n                  <td>gets the sine value of it's argument</td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>cos</td>\r\n                  <td>gets the cosine value of it's argument</td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>tan</td>\r\n                  <td>gets the tangens value of it's argument</td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>sqrt</td>\r\n                  <td>gets the square root of it's argument</td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>root</td>\r\n                  <td>\r\n                    gets the n'th root of it's first argument with n being the\r\n                    second argument\r\n                  </td>\r\n                  <td>2</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>abs</td>\r\n                  <td>gets the absolute value of it's argument</td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>max</td>\r\n                  <td>retruns the grater of two arguments</td>\r\n                  <td>2</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>min</td>\r\n                  <td>retruns the smaller of two arguments</td>\r\n                  <td>2</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>mod</td>\r\n                  <td>retruns the modulus of two arguments</td>\r\n                  <td>2</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>fac</td>\r\n                  <td>\r\n                    retruns the factorial of it's argument('!' after the number\r\n                    is also valid)\r\n                  </td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>round</td>\r\n                  <td>retruns the closest number to it's argument</td>\r\n                  <td>1</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>int</td>\r\n                  <td>truncates the number(removes all decimal places)</td>\r\n                  <td>1</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <li>Examples:</li>\r\n            <ul>\r\n              <li>\r\n                square wave: <code>mod(abs(int(x)), 2)-1/2</code>\r\n              </li>\r\n              <li>\r\n                puny single diode rectifier: <code>max(0, sin(x))</code>\r\n              </li>\r\n              <li>\r\n                FULL BRIDGE RECTIFIER: <code>abs(sin(x))</code>\r\n              </li>\r\n              <li>\r\n                triangle wave: <code>min(mod(x, 2), abs(mod(-x, 2)))-0.5</code>\r\n              </li>\r\n            </ul>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DocsModal;\r\n","import { useState } from 'react';\r\nimport { FaChevronLeft, FaChevronRight, FaTrashAlt } from 'react-icons/fa';\r\nimport { GraphInput } from './Canvas';\r\n\r\nexport interface GraphInputProps {\r\n  idx: number;\r\n  graph: GraphInput;\r\n  graphs: GraphInput[];\r\n  setGraphInputs: React.Dispatch<React.SetStateAction<GraphInput[]>>;\r\n}\r\n\r\nconst GraphItem: React.FC<GraphInputProps> = ({\r\n  idx,\r\n  graph,\r\n  graphs,\r\n  setGraphInputs,\r\n}) => {\r\n  const updateGraph = (updatedGraph: GraphInput) => {\r\n    const updatedGraphInputs = [...graphs];\r\n    updatedGraphInputs[idx] = updatedGraph;\r\n    setGraphInputs(updatedGraphInputs);\r\n  };\r\n\r\n  const [showIntervalInput, setShowIntervalInput] = useState<boolean>(false);\r\n  return (\r\n    <div className=\"graph-input\">\r\n      <div\r\n        className={'color-code' + (!graph.enabled ? ' disabled' : '')}\r\n        style={{ backgroundColor: graph.color }}\r\n        onClick={() => {\r\n          updateGraph({ ...graph, enabled: !graph.enabled });\r\n        }}\r\n      ></div>\r\n      <div className=\"function-info\">\r\n        <span>\r\n          f<span className=\"function-name\">{graph.id}</span>(x)\r\n        </span>\r\n        =\r\n      </div>\r\n      <div className=\"function-input-wrap\">\r\n        <input\r\n          type=\"text\"\r\n          value={graph.expression}\r\n          onChange={(e) => {\r\n            updateGraph({ ...graph, expression: e.target.value });\r\n          }}\r\n          spellCheck={false}\r\n        />\r\n        <div className=\"function-interval\">\r\n          {showIntervalInput && (\r\n            <>\r\n              x∈\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"(0; Infinity>\"\r\n                value={graph.interval}\r\n                onChange={(e) => {\r\n                  updateGraph({ ...graph, interval: e.target.value });\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n\r\n          <div\r\n            className=\"function-interval-toggle\"\r\n            onClick={() => {\r\n              setShowIntervalInput(!showIntervalInput);\r\n            }}\r\n          >\r\n            {showIntervalInput ? <FaChevronRight /> : <FaChevronLeft />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"remove\"\r\n        onClick={() => {\r\n          const updatedGraphInputs = [...graphs];\r\n          updatedGraphInputs.splice(idx, 1);\r\n\r\n          setGraphInputs(updatedGraphInputs);\r\n        }}\r\n      >\r\n        <FaTrashAlt />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphItem;\r\n","import { GraphInput } from './Canvas';\r\nimport GraphItem from './GraphItem';\r\n\r\nexport interface GraphListProps {\r\n  graphs: GraphInput[];\r\n  setGraphInputs: React.Dispatch<React.SetStateAction<GraphInput[]>>;\r\n}\r\n\r\nconst GraphList: React.FC<GraphListProps> = ({ graphs, setGraphInputs }) => {\r\n  return (\r\n    <>\r\n      {graphs.map((graphInput, idx) => (\r\n        <GraphItem\r\n          idx={idx}\r\n          graph={graphInput}\r\n          graphs={graphs}\r\n          setGraphInputs={setGraphInputs}\r\n          key={idx}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GraphList;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  AiOutlineAim,\r\n  AiOutlineZoomIn,\r\n  AiOutlineZoomOut,\r\n} from 'react-icons/ai';\r\nimport { FaChevronLeft, FaChevronRight, FaHome } from 'react-icons/fa';\r\nimport { IoMdAddCircle } from 'react-icons/io';\r\nimport { Graph } from '../graph';\r\nimport { randomRGBColor } from '../utils/random';\r\nimport DocsModal from './DocsModal';\r\nimport GraphList from './GraphList';\r\nexport interface CanvasProps {}\r\n\r\nexport interface GraphInput {\r\n  id: number;\r\n  expression: string;\r\n  color: string;\r\n  enabled: boolean;\r\n  interval: string;\r\n}\r\n\r\nconst ZOOM_STEP = 5;\r\n\r\nconst Canvas: React.FC<CanvasProps> = () => {\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n  const graph = useRef<Graph>();\r\n  const [graphInputs, setGraphInputs] = useState<GraphInput[]>([\r\n    {\r\n      id: 1,\r\n      expression: 'x',\r\n      color: randomRGBColor(),\r\n      enabled: true,\r\n      interval: 'R',\r\n    },\r\n  ]);\r\n  const graphInputsRef = useRef<GraphInput[]>(graphInputs);\r\n  graphInputsRef.current = graphInputs;\r\n\r\n  const addGraphRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [toolboxOpen, setToolBoxOpen] = useState<boolean>(\r\n    window.innerWidth > 400\r\n  );\r\n\r\n  const [graphDetail, setGraphDetail] = useState<number>(15);\r\n  const graphDetailRef = useRef<number>(graphDetail);\r\n  graphDetailRef.current = graphDetail;\r\n\r\n  const [relativeCoords, setRelativeCoords] = useState<{\r\n    x: number;\r\n    y: number;\r\n  }>({ x: 0, y: 0 });\r\n\r\n  const [showValueAtX, setShowValueAtX] = useState<boolean>(false);\r\n  const showValueAtXRef = useRef<boolean>(showValueAtX);\r\n  showValueAtXRef.current = showValueAtX;\r\n\r\n  const [isDocsModalOpen, setIsDocsModalOpen] = useState<boolean>(false);\r\n  const resetPosition = () => {\r\n    if (!graph.current || !canvas.current) return;\r\n    graph.current.moveGraphAbsolute(\r\n      canvas.current.width / 2,\r\n      canvas.current.height / 2\r\n    );\r\n    graph.current.resetZoom();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!canvas.current) return;\r\n    canvas.current.width = window.innerWidth;\r\n    canvas.current.height = window.innerHeight;\r\n\r\n    graph.current = new Graph(canvas.current);\r\n\r\n    graph.current.initialize();\r\n\r\n    let dragging = false;\r\n    canvas.current.addEventListener('mousedown', () => (dragging = true));\r\n\r\n    const stopDrag = () => {\r\n      dragging = false;\r\n      canvas.current?.classList.remove('dragging');\r\n    };\r\n    canvas.current.addEventListener('mouseup', stopDrag);\r\n    canvas.current.addEventListener('mouseleave', stopDrag);\r\n\r\n    canvas.current.addEventListener('mousemove', (e) => {\r\n      if (!graph.current || !canvas.current) return;\r\n      if (dragging) {\r\n        canvas.current?.classList.add('dragging');\r\n        graph.current.moveGraph(e.movementX, e.movementY);\r\n      }\r\n      const relCoords = graph.current.getRelativeCoordsFromAbsolute(e.x, e.y);\r\n      if (!relCoords) return;\r\n\r\n      setRelativeCoords(relCoords);\r\n      if (showValueAtXRef.current) {\r\n        graph.current.showFunctionValuesAtPos(e.x, e.y);\r\n      }\r\n    });\r\n    // for touch devices\r\n    let prevTouch: Touch | null = null;\r\n    const stopTouch = () => {\r\n      canvas.current?.classList.remove('dragging');\r\n      prevTouch = null;\r\n    };\r\n    canvas.current.addEventListener('touchend', stopTouch);\r\n    canvas.current.addEventListener('touchcancel', stopTouch);\r\n    canvas.current.addEventListener('touchmove', (e) => {\r\n      if (!graph.current || !canvas.current) return;\r\n      const touch = e.touches[0];\r\n      if (prevTouch) {\r\n        const movementX = touch.pageX - prevTouch.pageX;\r\n        const movementY = touch.pageY - prevTouch.pageY;\r\n\r\n        canvas.current?.classList.add('dragging');\r\n        graph.current.moveGraph(movementX, movementY);\r\n        const relCoords = graph.current.getRelativeCoordsFromAbsolute(\r\n          touch.pageX,\r\n          touch.pageY\r\n        );\r\n        if (!relCoords) return;\r\n\r\n        setRelativeCoords(relCoords);\r\n        if (showValueAtXRef.current) {\r\n          graph.current.showFunctionValuesAtPos(touch.pageX, touch.pageY);\r\n        }\r\n      }\r\n      prevTouch = touch;\r\n    });\r\n\r\n    window.addEventListener('resize', () => {\r\n      if (!graph.current || !canvas.current) return;\r\n      canvas.current.width = window.innerWidth;\r\n      canvas.current.height = window.innerHeight;\r\n      graph.current.resizeGraph(window.innerWidth, window.innerHeight);\r\n      graph.current.moveGraphAbsolute(\r\n        window.innerWidth / 2,\r\n        window.innerHeight / 2\r\n      );\r\n    });\r\n    canvas.current.addEventListener('wheel', (e: WheelEvent) => {\r\n      if (!graph.current) return;\r\n      let zoomDelta = ZOOM_STEP;\r\n      if (e.deltaY > 0) {\r\n        zoomDelta = -ZOOM_STEP;\r\n      }\r\n      graph.current.zoomGraph(zoomDelta, { x: e.x, y: e.y });\r\n    });\r\n    return () => {\r\n      if (!graph.current) return;\r\n      graph.current.clearGraph();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!graph.current) return;\r\n    graph.current.clearGraph();\r\n    graph.current.pointsPerSquare = graphDetail;\r\n    for (const { expression, color, enabled, interval } of graphInputs) {\r\n      if (!enabled) continue;\r\n      graph.current.drawGraph(expression, color, interval);\r\n    }\r\n\r\n    if (graphInputs.filter((graph) => graph.expression === '').length > 0) {\r\n      addGraphRef.current?.classList.add('banned');\r\n    } else {\r\n      addGraphRef.current?.classList.remove('banned');\r\n    }\r\n  }, [graphInputs, graphDetail]);\r\n\r\n  const addGraph = () => {\r\n    if (\r\n      graphInputsRef.current.filter((graph) => graph.expression === '').length >\r\n      0\r\n    )\r\n      return;\r\n    const lastGraph = graphInputsRef.current[graphInputsRef.current.length - 1];\r\n\r\n    const newId = lastGraph ? lastGraph.id + 1 : 1;\r\n    const newGraphInput: GraphInput = {\r\n      id: newId,\r\n      color: randomRGBColor(),\r\n      expression: '',\r\n      enabled: true,\r\n      interval: 'R',\r\n    };\r\n    setGraphInputs([...graphInputsRef.current, newGraphInput]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div\r\n          className=\"toolbox-control\"\r\n          onClick={() => setToolBoxOpen(!toolboxOpen)}\r\n        >\r\n          {toolboxOpen ? <FaChevronLeft /> : <FaChevronRight />}\r\n        </div>\r\n        <div\r\n          className=\"toolbox\"\r\n          style={{ visibility: toolboxOpen ? 'visible' : 'hidden' }}\r\n        >\r\n          <GraphList graphs={graphInputs} setGraphInputs={setGraphInputs} />\r\n          <div className=\"add-graph\" onClick={addGraph} ref={addGraphRef}>\r\n            <IoMdAddCircle />\r\n          </div>\r\n          <hr />\r\n          <div className=\"toolbox-options\">\r\n            <div>\r\n              <b>Options:</b>\r\n            </div>\r\n            <table className=\"options-table\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>detail:</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"range\"\r\n                      min={1}\r\n                      max={20}\r\n                      value={graphDetail}\r\n                      onChange={(e) => setGraphDetail(parseInt(e.target.value))}\r\n                    />\r\n                    <b>{graphDetail}</b>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <hr />\r\n          <div className=\"docs-button\">\r\n            <button onClick={() => setIsDocsModalOpen(true)}>Docs</button>\r\n          </div>\r\n        </div>\r\n        <canvas id=\"graph\" ref={canvas}></canvas>\r\n        <div className=\"graph-info\">\r\n          <div className=\"relative-wrap\">\r\n            X:{' '}\r\n            <div className=\"relative-value\">{relativeCoords.x.toFixed(2)}</div>\r\n          </div>\r\n          <div className=\"relative-wrap\">\r\n            Y:{' '}\r\n            <div className=\"relative-value\">{relativeCoords.y.toFixed(2)}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"toolbar\">\r\n          <div\r\n            className={'toolbar-item' + (!showValueAtX ? ' disabled' : '')}\r\n            onClick={() => {\r\n              if (showValueAtXRef) {\r\n                graph.current?.rerenderGraph();\r\n              }\r\n              setShowValueAtX(!showValueAtX);\r\n            }}\r\n          >\r\n            <AiOutlineAim />\r\n          </div>\r\n          <div className=\"toolbar-item\" onClick={resetPosition}>\r\n            <FaHome />\r\n          </div>\r\n          <div\r\n            className=\"toolbar-item\"\r\n            onClick={() => {\r\n              if (!canvas.current) return;\r\n              graph.current?.zoomGraph(ZOOM_STEP, {\r\n                x: canvas.current.width / 2,\r\n                y: canvas.current.height / 2,\r\n              });\r\n            }}\r\n          >\r\n            <AiOutlineZoomIn />\r\n          </div>\r\n          <div\r\n            className=\"toolbar-item\"\r\n            onClick={() => {\r\n              if (!canvas.current) return;\r\n              graph.current?.zoomGraph(-ZOOM_STEP, {\r\n                x: canvas.current.width / 2,\r\n                y: canvas.current.height / 2,\r\n              });\r\n            }}\r\n          >\r\n            <AiOutlineZoomOut />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <DocsModal isOpen={isDocsModalOpen} setIsOpen={setIsDocsModalOpen} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import Canvas from './components/Canvas';\n\nconst App = () => {\n  return (\n    <main>\n      <Canvas />\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// TODO: in mod function break the graph line where it shouldnt be\n"],"sourceRoot":""}