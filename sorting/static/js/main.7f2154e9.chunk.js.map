{"version":3,"sources":["globals.ts","components/BottomBar.tsx","components/Navbar.tsx","components/Sort.tsx","utils/swap.ts","sorts/bubbleSort.ts","sorts/insertionSort.ts","sorts/mergeSort.ts","sorts/quickSort.ts","sorts/selectionSort.ts","App.tsx","utils/randomList.ts","index.tsx"],"names":["colors","BottomBar","speed","comparisons","items","alreadySorted","sortName","className","style","backgroundColor","toFixed","Navbar","setEnabledSort","setItems","isPaused","setSpeed","reset","playPause","onClick","onChange","e","parseInt","target","value","type","min","max","Sort","order","highlights","canvas","useRef","useEffect","current","width","height","itemWidth","length","ctx","getContext","clearRect","forEach","item","i","highlighted","find","highlight","index","fillStyle","color","realHeight","fillRect","font","fillText","toString","ref","swap","array","i1","i2","newArray","temp","bubbleSort","sortedIndexes","mutableArray","nextIdx","thisItem","thisIdx","nextItem","push","newOrder","alreadySortedIndexes","insertionSort","cursor","isNested","nestedIndex","compare","previousIdx","Array","from","keys","mergeSort","arrayLength","curr_size","left_start","mid","Math","right_end","j","k","L","n1","R","n2","secondIdx","indexOf","sorted","idx","quickSort","l","h","stack","fill","top","pivot","pivotIdx","p","console","log","selectionSort","App","useState","enabledSort","enabledSortRef","currentArray","setCurrentArray","setHighlights","itemsRef","speedRef","setIsPaused","isPausedRef","isSorted","setIsSorted","isSortedRef","setComparisons","comparisonsRef","sort","setSort","sortLoop","setSortLoop","sortLoopRef","setAlreadySorted","randomList","response","x","floor","random","getRandomList","algo","sortId","getSort","timer","setInterval","next","done","clearInterval","newHighlights","document","addEventListener","key","getSortName","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7f2154e9.chunk.js","sourcesContent":["export const colors = {\r\n  sorted: '#00ff00',\r\n  compare: '#ffff00',\r\n  block: '#ff0000',\r\n  pivot: '#00ffff',\r\n  boundary: '#ff00ff',\r\n};\r\n\r\nexport const minSpeed = 1;\r\nexport const maxSpeed = 20;\r\nexport const minItems = 5;\r\nexport const maxItems = 250;\r\n","import { colors } from '../globals';\r\nimport '../styles/BottomBar.css';\r\ninterface BottomBarProps {\r\n  speed: number;\r\n  comparisons: number;\r\n  items: number;\r\n  alreadySorted: number;\r\n  sortName: string;\r\n}\r\nexport const BottomBar: React.FC<BottomBarProps> = ({\r\n  speed,\r\n  comparisons,\r\n  items,\r\n  alreadySorted,\r\n  sortName,\r\n}) => {\r\n  return (\r\n    <div className=\"bottom-bar\">\r\n      <div className=\"color-bar\">\r\n        <div className=\"color-wrap\">\r\n          <span\r\n            className=\"color\"\r\n            style={{ backgroundColor: colors.block }}\r\n          ></span>\r\n          &nbsp;- item\r\n        </div>\r\n        <div className=\"color-wrap\">\r\n          <span\r\n            className=\"color\"\r\n            style={{ backgroundColor: colors.compare }}\r\n          ></span>\r\n          &nbsp;- comparing\r\n        </div>\r\n        <div className=\"color-wrap\">\r\n          <span\r\n            className=\"color\"\r\n            style={{ backgroundColor: colors.sorted }}\r\n          ></span>\r\n          &nbsp;- sorted\r\n        </div>\r\n        <div className=\"color-wrap\">\r\n          <span\r\n            className=\"color\"\r\n            style={{ backgroundColor: colors.pivot }}\r\n          ></span>\r\n          &nbsp;- pivot\r\n        </div>\r\n        <div className=\"color-wrap\">\r\n          <span\r\n            className=\"color\"\r\n            style={{ backgroundColor: colors.boundary }}\r\n          ></span>\r\n          &nbsp;- boundary\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <h2>{sortName}</h2>\r\n      </div>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>Speed(it/s):</td>\r\n            <td>{speed}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Total items:</td>\r\n            <td>{items}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Total iterations:</td>\r\n            <td>{comparisons}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Already sorted:</td>\r\n            <td>\r\n              {alreadySorted} item{alreadySorted > 1 ? 's' : ''} (\r\n              {(alreadySorted / (items / 100)).toFixed(2)}%)\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { FaPause, FaPlay } from 'react-icons/fa';\r\nimport { GrPowerReset } from 'react-icons/gr';\r\nimport { maxItems, maxSpeed, minItems, minSpeed } from '../globals';\r\nimport '../styles/Navbar.css';\r\ninterface NavbarProps {\r\n  setEnabledSort: React.Dispatch<React.SetStateAction<number>>;\r\n  items: number;\r\n  setItems: React.Dispatch<React.SetStateAction<number>>;\r\n  speed: number;\r\n  setSpeed: React.Dispatch<React.SetStateAction<number>>;\r\n  isPaused: boolean;\r\n  reset: () => void;\r\n  playPause: () => void;\r\n}\r\nexport const Navbar: React.FC<NavbarProps> = ({\r\n  setEnabledSort,\r\n  items,\r\n  setItems,\r\n  isPaused,\r\n  speed,\r\n  setSpeed,\r\n  reset,\r\n  playPause,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Sorting Visualized</h1>\r\n      <div className=\"nav\">\r\n        <div className=\"sort-menu\">\r\n          <div className=\"menu-button\" /* ref={resetBtn} */ onClick={reset}>\r\n            <GrPowerReset />\r\n          </div>\r\n          <div className=\"menu-button\" onClick={playPause}>\r\n            {isPaused ? <FaPlay /> : <FaPause />}\r\n          </div>\r\n          <select onChange={(e) => setEnabledSort(parseInt(e.target.value))}>\r\n            <option value={0}>Bubble sort</option>\r\n            <option value={1}>Selection sort</option>\r\n            <option value={2}>Insertion sort</option>\r\n            <option value={3}>Merge sort</option>\r\n            <option value={4}>Quick sort</option>\r\n          </select>\r\n\r\n          <div className=\"menu-slider\">\r\n            <label>Speed</label>\r\n            <input\r\n              type=\"range\"\r\n              min={minSpeed}\r\n              max={maxSpeed}\r\n              value={speed}\r\n              onChange={(e) => setSpeed(parseInt(e.target.value))}\r\n            />\r\n          </div>\r\n          <div className=\"menu-slider\">\r\n            <label>Items</label>\r\n            <input\r\n              type=\"range\"\r\n              min={minItems}\r\n              max={maxItems}\r\n              value={items}\r\n              onChange={(e) => setItems(parseInt(e.target.value))}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { colors } from '../globals';\r\nimport { Highlight } from '../types';\r\n\r\nexport type DrawStateFn = (\r\n  canvas: HTMLCanvasElement,\r\n  array: number[],\r\n  highlights?: Highlight[]\r\n) => void;\r\n\r\ninterface SortProps {\r\n  order: number[];\r\n  highlights: Highlight[];\r\n}\r\n\r\nexport const Sort: React.FC<SortProps> = ({ order, highlights }) => {\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n  useEffect(() => {\r\n    if (!canvas.current) return;\r\n    const width = canvas.current.width;\r\n    const height = canvas.current.height;\r\n    const itemWidth = width / order.length;\r\n    const ctx = canvas.current.getContext('2d');\r\n    if (!ctx) return;\r\n    ctx.clearRect(0, 0, width, height);\r\n    order.forEach((item, i) => {\r\n      const highlighted = highlights?.find(\r\n        (highlight) => highlight.index === i\r\n      );\r\n      if (highlighted) {\r\n        ctx.fillStyle = highlighted.color;\r\n      } else {\r\n        ctx.fillStyle = colors.block;\r\n      }\r\n      const realHeight = item * (height / order.length);\r\n      ctx.fillRect(\r\n        i * itemWidth + 1,\r\n        height - realHeight,\r\n        itemWidth - 1,\r\n        realHeight\r\n      );\r\n\r\n      ctx.fillStyle = '#000000';\r\n      ctx.font = `${itemWidth > 20 ? '12' : itemWidth / 2}px Arial`;\r\n      ctx.fillText(item.toString(), i * itemWidth + 5, height - 3);\r\n    });\r\n  });\r\n  return (\r\n    <div>\r\n      <canvas\r\n        className=\"sort-canvas\"\r\n        ref={canvas}\r\n        width=\"600\"\r\n        height=\"365\"\r\n      ></canvas>\r\n    </div>\r\n  );\r\n};\r\n","export const swap = (array: number[], i1: number, i2: number) => {\r\n  const newArray = array;\r\n  const temp = array[i1];\r\n  newArray[i1] = array[i2];\r\n  newArray[i2] = temp;\r\n  return newArray;\r\n};\r\n","import { colors } from '../globals';\r\nimport { SortResponse } from '../types';\r\nimport { swap } from '../utils/swap';\r\n\r\nexport function* bubbleSort(array: number[]): IterableIterator<SortResponse> {\r\n  let index = 0;\r\n  const sortedIndexes: number[] = [];\r\n  let mutableArray = array;\r\n\r\n  while (sortedIndexes.length < array.length) {\r\n    const thisIdx = index;\r\n    const nextIdx = index + 1;\r\n    const thisItem = mutableArray[thisIdx];\r\n    const nextItem = mutableArray[nextIdx];\r\n    if (thisItem > nextItem) {\r\n      mutableArray = swap(mutableArray, thisIdx, nextIdx);\r\n    }\r\n\r\n    if (index === 0 && sortedIndexes.find((i) => i === nextIdx)) {\r\n      sortedIndexes.push(thisIdx);\r\n    } else if (nextIdx + 1 === array.length - sortedIndexes.length) {\r\n      sortedIndexes.push(nextIdx);\r\n\r\n      index = 0;\r\n    } else {\r\n      index++;\r\n    }\r\n    yield {\r\n      newOrder: mutableArray,\r\n      highlights: [\r\n        { index: thisIdx, color: colors.compare },\r\n        { index: nextIdx, color: colors.compare },\r\n      ],\r\n      alreadySortedIndexes: sortedIndexes,\r\n    };\r\n  }\r\n}\r\n","import { colors } from '../globals';\r\nimport { SortResponse } from '../types';\r\nimport { swap } from '../utils/swap';\r\n\r\nexport function* insertionSort(\r\n  array: number[]\r\n): IterableIterator<SortResponse> {\r\n  let sortedIndexes: number[] = [];\r\n  let cursor = 1;\r\n  let mutableArray = array;\r\n  let isNested = false;\r\n  let nestedIndex = 0;\r\n\r\n  const compare = (thisIdx: number, previousIdx: number) => {\r\n    const thisItem = mutableArray[thisIdx];\r\n    const previousItem = mutableArray[previousIdx];\r\n    if (thisItem < previousItem) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  while (sortedIndexes.length < array.length) {\r\n    // error ???\r\n    let thisIdx = 0;\r\n    let previousIdx = 0;\r\n    if (isNested) {\r\n      thisIdx = nestedIndex;\r\n      previousIdx = nestedIndex - 1;\r\n      const shouldSwap = compare(thisIdx, previousIdx);\r\n      if (shouldSwap) {\r\n        mutableArray = swap(mutableArray, thisIdx, previousIdx);\r\n        nestedIndex--;\r\n      } else {\r\n        isNested = false;\r\n        nestedIndex = 0;\r\n      }\r\n    } else {\r\n      thisIdx = cursor;\r\n      previousIdx = cursor - 1;\r\n\r\n      const shouldSwap = compare(thisIdx, previousIdx);\r\n      if (shouldSwap) {\r\n        mutableArray = swap(mutableArray, thisIdx, previousIdx);\r\n        nestedIndex = previousIdx;\r\n        isNested = true;\r\n      }\r\n      if (cursor === array.length) {\r\n        sortedIndexes = Array.from(Array(mutableArray.length).keys());\r\n      }\r\n      cursor++;\r\n    }\r\n    yield {\r\n      newOrder: mutableArray,\r\n      highlights: [\r\n        { index: thisIdx, color: colors.compare },\r\n        { index: previousIdx, color: colors.compare },\r\n        { index: cursor - 1, color: colors.boundary },\r\n      ],\r\n      alreadySortedIndexes: sortedIndexes,\r\n    };\r\n  }\r\n}\r\n","import { colors } from '../globals';\r\nimport { SortResponse } from '../types';\r\n\r\nexport function* mergeSort(array: number[]): IterableIterator<SortResponse> {\r\n  const arrayLength = array.length;\r\n  let curr_size;\r\n  let left_start;\r\n\r\n  for (curr_size = 1; curr_size <= arrayLength - 1; curr_size *= 2) {\r\n    for (\r\n      left_start = 0;\r\n      left_start < arrayLength - 1;\r\n      left_start += 2 * curr_size\r\n    ) {\r\n      const mid = Math.min(left_start + curr_size - 1, arrayLength - 1);\r\n\r\n      const right_end = Math.min(\r\n        left_start + 2 * curr_size - 1,\r\n        arrayLength - 1\r\n      );\r\n\r\n      // merge sub-arrays\r\n      let i, j, k;\r\n      const n1 = mid - left_start + 1;\r\n      const n2 = right_end - mid;\r\n\r\n      const L = [n1];\r\n      const R = [n2];\r\n\r\n      for (i = 0; i < n1; i++) L[i] = array[left_start + i];\r\n      for (j = 0; j < n2; j++) R[j] = array[mid + 1 + j];\r\n\r\n      i = 0;\r\n      j = 0;\r\n      k = left_start;\r\n      while (i < n1 && j < n2) {\r\n        let secondIdx = i;\r\n        if (L[i] <= R[j]) {\r\n          secondIdx = array.indexOf(L[i]);\r\n          array[array.indexOf(L[i])] = array[k];\r\n          array[k] = L[i];\r\n          i++;\r\n        } else {\r\n          secondIdx = array.indexOf(R[j]);\r\n          array[array.indexOf(R[j])] = array[k];\r\n          array[k] = R[j];\r\n          j++;\r\n        }\r\n        yield {\r\n          alreadySortedIndexes: [],\r\n          highlights: [\r\n            { index: left_start, color: colors.boundary },\r\n            { index: right_end, color: colors.boundary },\r\n            { index: k, color: colors.compare },\r\n            { index: secondIdx, color: colors.compare },\r\n          ],\r\n          newOrder: array,\r\n        };\r\n        k++;\r\n      }\r\n\r\n      while (i < n1) {\r\n        array[k] = L[i];\r\n        i++;\r\n        k++;\r\n      }\r\n\r\n      while (j < n2) {\r\n        array[k] = R[j];\r\n        j++;\r\n        k++;\r\n      }\r\n    }\r\n  }\r\n\r\n  let sorted = true;\r\n  for (let idx = 0; idx < array.length; idx++) {\r\n    if (array[idx] > 1 && array[idx] !== array[idx - 1] + 1) {\r\n      sorted = false;\r\n      break;\r\n    }\r\n  }\r\n  if (sorted) {\r\n    yield {\r\n      alreadySortedIndexes: Array.from(Array(array.length).keys()),\r\n      highlights: [],\r\n      newOrder: array,\r\n    };\r\n  }\r\n}\r\n\r\n// source: https://www.geeksforgeeks.org/iterative-merge-sort/\r\n// const mergeSortBackup = (array: number[]) => {\r\n//   const arrayLength = array.length;\r\n//   let curr_size; // For current size of subarrays to be merged\r\n//   // curr_size varies from 1 to n/2\r\n//   let left_start; // For picking starting index of left subarray\r\n//   // to be merged\r\n\r\n//   // Merge subarrays in bottom up manner.  First merge subarrays of\r\n//   // size 1 to create sorted subarrays of size 2, then merge subarrays\r\n//   // of size 2 to create sorted subarrays of size 4, and so on.\r\n//   for (curr_size = 1; curr_size <= arrayLength - 1; curr_size *= 2) {\r\n//     // Pick starting point of different subarrays of current size\r\n//     for (\r\n//       left_start = 0;\r\n//       left_start < arrayLength - 1;\r\n//       left_start += 2 * curr_size\r\n//     ) {\r\n//       // Find ending point of left subarray. mid+1 is starting\r\n//       // point of right\r\n//       const mid = Math.min(left_start + curr_size - 1, arrayLength - 1);\r\n\r\n//       const right_end = Math.min(\r\n//         left_start + 2 * curr_size - 1,\r\n//         arrayLength - 1\r\n//       );\r\n\r\n//       // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]\r\n//       // merge(arr, left_start, mid, right_end);\r\n\r\n//       let i, j, k;\r\n//       const n1 = mid - left_start + 1;\r\n//       const n2 = right_end - mid;\r\n\r\n//       const L = [n1];\r\n//       const R = [n2];\r\n\r\n//       /* Copy data to temp arrays L[] and R[] */\r\n//       for (i = 0; i < n1; i++) L[i] = array[left_start + i];\r\n//       for (j = 0; j < n2; j++) R[j] = array[mid + 1 + j];\r\n\r\n//       /* Merge the temp arrays back into arr[l..r] */\r\n//       i = 0;\r\n//       j = 0;\r\n//       k = left_start;\r\n//       while (i < n1 && j < n2) {\r\n//         if (L[i] <= R[j]) {\r\n//           array[k] = L[i];\r\n//           i++;\r\n//         } else {\r\n//           array[k] = R[j];\r\n//           j++;\r\n//         }\r\n//         k++;\r\n//       }\r\n\r\n//       /* Copy the remaining elements of L[], if there are any */\r\n//       while (i < n1) {\r\n//         array[k] = L[i];\r\n//         i++;\r\n//         k++;\r\n//       }\r\n\r\n//       /* Copy the remaining elements of R[], if there are any */\r\n//       while (j < n2) {\r\n//         array[k] = R[j];\r\n//         j++;\r\n//         k++;\r\n//       }\r\n//     }\r\n//   }\r\n// };\r\n","import { colors } from \"../globals\";\r\nimport { SortResponse } from \"../types\";\r\nimport { randomInt } from \"../utils/randomNumber\";\r\n\r\nexport function* quickSort(array: number[]): IterableIterator<SortResponse> {\r\n  const sortedIndexes: number[] = [];\r\n  let l = 0;\r\n  let h = array.length - 1;\r\n  let stack = new Array(h - l + 1);\r\n  stack.fill(0);\r\n\r\n  let top = -1;\r\n\r\n  stack[++top] = l;\r\n  stack[++top] = h;\r\n\r\n  while (top >= 0) {\r\n    h = stack[top--];\r\n    l = stack[top--];\r\n\r\n    //  let p = partition(array, l, h);\r\n\r\n    let temp;\r\n    const pivotIdx = h;\r\n    let pivot = array[pivotIdx];\r\n\r\n    yield {\r\n      newOrder: array,\r\n      highlights: [\r\n        {\r\n          index: pivotIdx,\r\n          color: colors.pivot,\r\n        },\r\n        {\r\n          index: h,\r\n          color: colors.boundary,\r\n        },\r\n        {\r\n          index: l,\r\n          color: colors.boundary,\r\n        },\r\n      ],\r\n      alreadySortedIndexes: sortedIndexes,\r\n    };\r\n\r\n    let i = l - 1;\r\n    for (let j = l; j <= h - 1; j++) {\r\n      if (array[j] <= pivot) {\r\n        i++;\r\n\r\n        temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        yield {\r\n          newOrder: array,\r\n          highlights: [\r\n            {\r\n              index: i,\r\n              color: colors.compare,\r\n            },\r\n            {\r\n              index: j,\r\n              color: colors.compare,\r\n            },\r\n          ],\r\n          alreadySortedIndexes: sortedIndexes,\r\n        };\r\n      }\r\n    }\r\n\r\n    temp = array[i + 1];\r\n    array[i + 1] = array[pivotIdx];\r\n    array[pivotIdx] = temp;\r\n    let p = i + 1;\r\n    console.log(pivotIdx, p);\r\n    if (p - 1 > l) {\r\n      stack[++top] = l;\r\n      stack[++top] = p - 1;\r\n    }\r\n\r\n    if (p + 1 < h) {\r\n      stack[++top] = p + 1;\r\n      stack[++top] = h;\r\n    }\r\n\r\n    sortedIndexes.push(p);\r\n  }\r\n  let sorted = true;\r\n  for (let idx = 0; idx < array.length; idx++) {\r\n    if (array[idx] > 1 && array[idx] !== array[idx - 1] + 1) {\r\n      sorted = false;\r\n      break;\r\n    }\r\n  }\r\n  if (sorted) {\r\n    yield {\r\n      alreadySortedIndexes: Array.from(Array(array.length).keys()),\r\n      highlights: [],\r\n      newOrder: array,\r\n    };\r\n  }\r\n}\r\n\r\n// source: https://www.geeksforgeeks.org/iterative-quick-sort/\r\n// /* A[] --> Array to be sorted,\r\n// l --> Starting index,\r\n// h --> Ending index */\r\n// const quickSortIterative = (arr: number[], l: number, h: number) => {\r\n//   // Create an auxiliary stack\r\n//   let newArray: number[] = arr;\r\n//   let stack = new Array(h - l + 1);\r\n//   stack.fill(0);\r\n\r\n//   // initialize top of stack\r\n//   let top = -1;\r\n\r\n//   // push initial values of l and h to\r\n//   // stack\r\n//   stack[++top] = l;\r\n//   stack[++top] = h;\r\n\r\n//   // Keep popping from stack while\r\n//   // is not empty\r\n//   while (top >= 0) {\r\n//     // Pop h and l\r\n//     h = stack[top--];\r\n//     l = stack[top--];\r\n\r\n//     // Set pivot element at its\r\n//     // correct position in\r\n//     // sorted array\r\n//     let p = partition(newArray, l, h);\r\n\r\n//     // If there are elements on\r\n//     // left side of pivot, then\r\n//     // push left side to stack\r\n//     if (p - 1 > l) {\r\n//       stack[++top] = l;\r\n//       stack[++top] = p - 1;\r\n//     }\r\n\r\n//     // If there are elements on\r\n//     // right side of pivot, then\r\n//     // push right side to stack\r\n//     if (p + 1 < h) {\r\n//       stack[++top] = p + 1;\r\n//       stack[++top] = h;\r\n//     }\r\n//   }\r\n//   return newArray;\r\n// };\r\n","import { colors } from '../globals';\r\nimport { SortResponse } from '../types';\r\nimport { swap } from '../utils/swap';\r\n\r\nexport function* selectionSort(\r\n  array: number[]\r\n): IterableIterator<SortResponse> {\r\n  let index = 0;\r\n  const sortedIndexes = [];\r\n  let cursor = sortedIndexes.length + 1;\r\n  let mutableArray = array;\r\n\r\n  while (sortedIndexes.length < array.length) {\r\n    const thisItem = mutableArray[index];\r\n    const nextItem = mutableArray[cursor];\r\n    if (thisItem > nextItem) {\r\n      mutableArray = swap(mutableArray, index, cursor);\r\n    }\r\n\r\n    if (cursor === array.length - 1 || index === array.length - 1) {\r\n      sortedIndexes.push(index);\r\n      cursor = sortedIndexes.length; // (sortedIndexes.length - 1) + 1\r\n      index++;\r\n    }\r\n\r\n    cursor++;\r\n    yield {\r\n      newOrder: mutableArray,\r\n      highlights: [\r\n        { index: index, color: colors.compare },\r\n        { index: cursor, color: colors.compare },\r\n      ],\r\n      alreadySortedIndexes: sortedIndexes,\r\n    };\r\n  }\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { BottomBar } from \"./components/BottomBar\";\r\nimport { Navbar } from \"./components/Navbar\";\r\nimport { Sort } from \"./components/Sort\";\r\nimport { maxItems, maxSpeed, minItems, minSpeed } from \"./globals\";\r\nimport { bubbleSort } from \"./sorts/bubbleSort\";\r\nimport { insertionSort } from \"./sorts/insertionSort\";\r\nimport { mergeSort } from \"./sorts/mergeSort\";\r\nimport { quickSort } from \"./sorts/quickSort\";\r\nimport { selectionSort } from \"./sorts/selectionSort\";\r\nimport \"./styles/App.css\";\r\nimport { Highlight, SortResponse } from \"./types\";\r\nimport { getRandomList } from \"./utils/randomList\";\r\n\r\nconst App = () => {\r\n  const [enabledSort, setEnabledSort] = useState<number>(0);\r\n  const enabledSortRef = useRef<number>(enabledSort);\r\n  enabledSortRef.current = enabledSort;\r\n  const [currentArray, setCurrentArray] = useState<number[]>([]);\r\n  const currentArrayRef = useRef<number[]>(currentArray);\r\n  currentArrayRef.current = currentArray;\r\n  const [highlights, setHighlights] = useState<Highlight[]>([]);\r\n  const [items, setItems] = useState<number>(20);\r\n  const itemsRef = useRef<number>(items);\r\n  itemsRef.current = items;\r\n  const [speed, setSpeed] = useState<number>(2);\r\n  const speedRef = useRef<number>(speed);\r\n  speedRef.current = speed;\r\n  const [isPaused, setIsPaused] = useState<boolean>(true);\r\n  const isPausedRef = useRef<boolean>(isPaused);\r\n  isPausedRef.current = isPaused;\r\n  const [isSorted, setIsSorted] = useState<boolean>(false);\r\n  const isSortedRef = useRef<boolean>(isSorted);\r\n  isSortedRef.current = isSorted;\r\n  const [comparisons, setComparisons] = useState<number>(0);\r\n  const comparisonsRef = useRef<number>(comparisons);\r\n  comparisonsRef.current = comparisons;\r\n  const [sort, setSort] = useState<IterableIterator<SortResponse>>();\r\n  const [sortLoop, setSortLoop] = useState<NodeJS.Timeout>();\r\n  const sortLoopRef = useRef<NodeJS.Timeout>();\r\n  const [alreadySorted, setAlreadySorted] = useState<number[]>([]);\r\n  sortLoopRef.current = sortLoop;\r\n\r\n  const getSortName = (sortId: number) => {\r\n    switch (sortId) {\r\n      case 0:\r\n        return \"Bubble sort\";\r\n      case 1:\r\n        return \"Selection sort\";\r\n      case 2:\r\n        return \"Insertion sort\";\r\n      case 3:\r\n        return \"Merge sort\";\r\n      case 4:\r\n        return \"Quick sort\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const getSort = (sortId: number, array: number[]) => {\r\n    switch (sortId) {\r\n      case 0:\r\n        return bubbleSort(array);\r\n      case 1:\r\n        return selectionSort(array);\r\n      case 2:\r\n        return insertionSort(array);\r\n      case 3:\r\n        return mergeSort(array);\r\n      case 4:\r\n        return quickSort(array);\r\n      default:\r\n        return undefined;\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setIsPaused(true);\r\n    const randomList = getRandomList(items);\r\n    const algo = getSort(enabledSortRef.current, randomList);\r\n    if (algo) {\r\n      setSort(algo);\r\n    }\r\n    setCurrentArray(randomList);\r\n    setHighlights([]);\r\n    setIsSorted(false);\r\n    setComparisons(0);\r\n    setAlreadySorted([]);\r\n  };\r\n  useEffect(() => {\r\n    reset();\r\n  }, [items]);\r\n\r\n  useEffect(() => {\r\n    if (!sort) return;\r\n    if (isPaused) {\r\n      if (sortLoopRef.current) {\r\n        clearInterval(sortLoopRef.current);\r\n      }\r\n      return;\r\n    }\r\n    const timer = setInterval(() => {\r\n      const { value, done } = sort.next() as {\r\n        value: SortResponse;\r\n        done?: boolean;\r\n      };\r\n      if (done) {\r\n        clearInterval(timer);\r\n        setIsPaused(true);\r\n        return;\r\n      }\r\n      setComparisons(comparisonsRef.current + 1);\r\n      const newOrder = value.newOrder;\r\n      setCurrentArray(newOrder);\r\n\r\n      let newHighlights = [...value.highlights];\r\n      if (value.alreadySortedIndexes.length === newOrder.length) {\r\n        clearInterval(timer);\r\n        setIsPaused(true);\r\n        setIsSorted(true);\r\n        newHighlights = [];\r\n      }\r\n      setAlreadySorted(value.alreadySortedIndexes);\r\n      if (value.alreadySortedIndexes.length > 0) {\r\n        value.alreadySortedIndexes.forEach((index) => {\r\n          newHighlights.push({ index, color: \"#00ff00\" });\r\n        });\r\n      }\r\n      setHighlights(newHighlights);\r\n    }, 1000 / speed);\r\n    setSortLoop(timer);\r\n\r\n    return () => {\r\n      if (sortLoopRef.current) {\r\n        clearInterval(sortLoopRef.current);\r\n      }\r\n    };\r\n  }, [sort, isPaused, speed]);\r\n\r\n  useEffect(() => {\r\n    reset();\r\n  }, [enabledSort]);\r\n\r\n  const playPause = () => {\r\n    if (isSortedRef.current) {\r\n      reset();\r\n    }\r\n    setIsPaused(!isPausedRef.current);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", (e) => {\r\n      switch (e.key) {\r\n        case \" \":\r\n          playPause();\r\n          break;\r\n        case \"ArrowRight\":\r\n          if (speedRef.current < maxSpeed) {\r\n            setSpeed(speedRef.current + 1);\r\n          }\r\n          break;\r\n        case \"ArrowLeft\":\r\n          if (speedRef.current > minSpeed) {\r\n            setSpeed(speedRef.current - 1);\r\n          }\r\n          break;\r\n        case \"+\":\r\n          if (itemsRef.current < maxItems) {\r\n            setItems(itemsRef.current + 1);\r\n          }\r\n          break;\r\n        case \"-\":\r\n          if (itemsRef.current > minItems) {\r\n            setItems(itemsRef.current - 1);\r\n          }\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app-wrap\">\r\n        <Navbar\r\n          setEnabledSort={setEnabledSort}\r\n          items={items}\r\n          setItems={setItems}\r\n          speed={speed}\r\n          setSpeed={setSpeed}\r\n          isPaused={isPaused}\r\n          reset={reset}\r\n          playPause={playPause}\r\n        />\r\n        <Sort order={currentArray} highlights={highlights} />\r\n        <BottomBar\r\n          comparisons={comparisons}\r\n          speed={speed}\r\n          items={items}\r\n          alreadySorted={alreadySorted.length}\r\n          sortName={getSortName(enabledSort)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const getRandomList = (length: number) => {\r\n  const response = Array.from({ length }, (x, i) => i + 1);\r\n  for (let i = response.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = response[i];\r\n    response[i] = response[j];\r\n    response[j] = temp;\r\n  }\r\n  return response;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}