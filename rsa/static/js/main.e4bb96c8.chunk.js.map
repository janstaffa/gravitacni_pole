{"version":3,"sources":["utils.ts","App.tsx","index.tsx"],"names":["isOdd","n","bigNumber","BigInteger","randomInt","min","max","Math","floor","random","oddNumbers","randomOddNumber","randomIdx","length","hexToDec","hexStr","hexArr","split","decimalResult","ZERO","exponent","hex","multiplierValue","parseInt","add","toString","multiply","pow","decToHex","decimalBI","hexValue","quotient","compareTo","divideAndRemainder","textToNumber","text","textArr","hexString","charCodeAt","genRandomPrimeBI","response","i","lastNumber","slice","millerRabin","getJunk","String","fromCharCode","App","privateExponentDisplay","useRef","publicExponentDispay","modulusDisplay","inputMessage","inputFriendModulus","inputFriendPublicExponent","outputEncryptedMessage","inputEncryptedMessage","outputDecryptedMessage","useState","encrypting","setEncrypting","decrypting","setDecrypting","addPaddnig","setAddPadding","addPaddingRef","current","removePadding","setRemovePadding","removePaddingRef","showDecimalValues","setShowDecimalValues","showDecimalValuesRef","pqLength","setPQLength","p","q","nLambda","e","d","useEffect","n1","n2","ONE","subtract","divide","gcd","abs","modInverse","innerHTML","handleEncrypt","a","alert","message","value","friendsModulus","friendsExponent","messageNumber","Date","getTime","cipher","modPow","setTimeout","className","src","alt","type","onChange","target","onClick","ref","readOnly","htmlFor","name","rows","placeholder","checked","size","encryptedMessage","messageText","number","numberToText","decryptedMessage","shift","pop","join","unpadd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4bb96c8.chunk.js","sourcesContent":["import { BigInteger } from 'jsbn';\r\n\r\nexport const isOdd = (n: number) => !!(n % 2);\r\n\r\nexport const bigNumber = (n: string) => {\r\n  return new BigInteger(n);\r\n};\r\nexport const randomInt = (min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nconst oddNumbers = [1, 3, 5, 7, 9];\r\nexport const randomOddNumber = () => {\r\n  const randomIdx = randomInt(0, oddNumbers.length - 1);\r\n  return oddNumbers[randomIdx];\r\n};\r\nexport const strToHex = (str: string) => {\r\n  const strArr = str.split('');\r\n  let result = '';\r\n  for (const n of strArr) {\r\n    result += n.charCodeAt(0).toString(16);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const hexToDec = (hexStr: string) => {\r\n  const hexArr = hexStr.split('');\r\n  let decimalResult = BigInteger.ZERO;\r\n  let exponent = hexStr.length - 1;\r\n  for (const hex of hexArr) {\r\n    const multiplierValue = parseInt(hex, 16);\r\n    decimalResult = decimalResult.add(\r\n      bigNumber(multiplierValue.toString()).multiply(\r\n        bigNumber('16').pow(exponent)\r\n      )\r\n    );\r\n    exponent--;\r\n  }\r\n  return decimalResult;\r\n};\r\n\r\nexport const decToHex = (decimalBI: BigInteger) => {\r\n  let hexValue = '';\r\n\r\n  let quotient = decimalBI;\r\n  if (decimalBI.compareTo(bigNumber('16')) < 0) {\r\n    return decimalBI.toString(16);\r\n  }\r\n  do {\r\n    const [div, rem] = quotient.divideAndRemainder(bigNumber('16'));\r\n    quotient = div;\r\n    hexValue = decToHex(rem) + hexValue;\r\n  } while (quotient.compareTo(BigInteger.ZERO) > 0);\r\n  return hexValue;\r\n};\r\n\r\nexport const textToNumber = (text: string) => {\r\n  const textArr = text.split('');\r\n\r\n  let hexString = '';\r\n  for (const char of textArr) {\r\n    const charCode = char.charCodeAt(0);\r\n    hexString += charCode.toString(16);\r\n  }\r\n  return hexToDec(hexString);\r\n};\r\nexport const numberToText = (number: string) => {\r\n  const hexValue = decToHex(bigNumber(number));\r\n  let text = '';\r\n  for (let i = 0; i < hexValue.length; i += 2) {\r\n    text += String.fromCharCode(parseInt(hexValue[i] + hexValue[i + 1], 16));\r\n  }\r\n  return text;\r\n};\r\n// NEW CODE WITH JSBN\r\n\r\nexport const genRandomPrimeBI = (length: number) => {\r\n  let response: string = '';\r\n\r\n  do {\r\n    response = '';\r\n    for (let i = 0; i < length; i++) {\r\n      const n = Math.floor(Math.random() * 10);\r\n      response += n;\r\n    }\r\n    const lastNumber = parseInt(response[response.length - 1]);\r\n    if (!isOdd(lastNumber)) {\r\n      response = response.slice(0, -1) + randomOddNumber();\r\n    }\r\n  } while (\r\n    !bigNumber(response).millerRabin(40) ||\r\n    bigNumber(response).compareTo(BigInteger.ZERO) === 0\r\n  );\r\n\r\n  return bigNumber(response);\r\n};\r\n\r\nexport const lcmBI = (n1: BigInteger, n2: BigInteger): BigInteger => {\r\n  return n1.multiply(n2).divide(n1.gcd(n2)).abs();\r\n};\r\n\r\nexport const getJunk = (length: number) => {\r\n  let response = '';\r\n  for (let i = 0; i < length; i++) {\r\n    response += String.fromCharCode(randomInt(33, 126));\r\n  }\r\n  return response;\r\n};\r\nexport const padd = (text: string) => {\r\n  const timestamp = new Date().getTime();\r\n\r\n  const paddedText =\r\n    timestamp.toString() +\r\n    getJunk(5) +\r\n    ' ' +\r\n    text +\r\n    ' ' +\r\n    text.length.toString() +\r\n    getJunk(5);\r\n\r\n  return paddedText;\r\n};\r\n\r\nexport const unpadd = (text: string) => {\r\n  const textArr = text.split(' ');\r\n  textArr.shift();\r\n  textArr.pop();\r\n  return textArr.join(' ');\r\n};\r\n","import { BigInteger } from 'jsbn';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport {\n  decToHex,\n  genRandomPrimeBI,\n  hexToDec,\n  lcmBI,\n  numberToText,\n  padd,\n  textToNumber,\n  unpadd,\n} from './utils';\n\nexport const App = () => {\n  const privateExponentDisplay = useRef<HTMLTextAreaElement>(null);\n  const publicExponentDispay = useRef<HTMLTextAreaElement>(null);\n  const modulusDisplay = useRef<HTMLTextAreaElement>(null);\n\n  const inputMessage = useRef<HTMLTextAreaElement>(null);\n  const inputFriendModulus = useRef<HTMLInputElement>(null);\n  const inputFriendPublicExponent = useRef<HTMLInputElement>(null);\n\n  const outputEncryptedMessage = useRef<HTMLTextAreaElement>(null);\n  const inputEncryptedMessage = useRef<HTMLTextAreaElement>(null);\n  const outputDecryptedMessage = useRef<HTMLTextAreaElement>(null);\n\n  const [encrypting, setEncrypting] = useState<boolean>(false);\n  const [decrypting, setDecrypting] = useState<boolean>(false);\n  const [addPaddnig, setAddPadding] = useState<boolean>(true);\n  const addPaddingRef = useRef<boolean>(addPaddnig);\n  addPaddingRef.current = addPaddnig;\n  const [removePadding, setRemovePadding] = useState<boolean>(true);\n  const removePaddingRef = useRef<boolean>(removePadding);\n  removePaddingRef.current = removePadding;\n\n  const [showDecimalValues, setShowDecimalValues] = useState<boolean>(false);\n  const showDecimalValuesRef = useRef<boolean>(showDecimalValues);\n  showDecimalValuesRef.current = showDecimalValues;\n  const [pqLength, setPQLength] = useState<number>(100);\n  //key generation\n  const p = useRef<BigInteger>(BigInteger.ZERO);\n  const q = useRef<BigInteger>(BigInteger.ZERO);\n  const n = useRef<BigInteger>(BigInteger.ZERO);\n  const nLambda = useRef<BigInteger>(BigInteger.ZERO);\n  const e = useRef<BigInteger>(BigInteger.ZERO);\n  const d = useRef<BigInteger>(BigInteger.ZERO);\n\n  useEffect(() => {\n    p.current = genRandomPrimeBI(pqLength);\n    q.current = genRandomPrimeBI(pqLength);\n    n.current = p.current.multiply(q.current);\n    nLambda.current = lcmBI(\n      p.current.compareTo(BigInteger.ONE) > 0\n        ? p.current.subtract(BigInteger.ONE)\n        : BigInteger.ONE,\n      q.current.compareTo(BigInteger.ONE) > 0\n        ? q.current.subtract(BigInteger.ONE)\n        : BigInteger.ONE\n    );\n    e.current = new BigInteger('2').pow(16).add(BigInteger.ONE);\n    d.current = e.current.modInverse(nLambda.current);\n  }, [pqLength]);\n  useEffect(() => {\n    if (privateExponentDisplay.current) {\n      privateExponentDisplay.current.innerHTML = showDecimalValuesRef.current\n        ? d.current.toString()\n        : d.current.toString(16);\n    }\n\n    if (modulusDisplay.current && publicExponentDispay.current) {\n      modulusDisplay.current.innerHTML = showDecimalValuesRef.current\n        ? n.current.toString()\n        : n.current.toString(16);\n      publicExponentDispay.current.innerHTML = showDecimalValuesRef.current\n        ? e.current.toString()\n        : e.current.toString(16);\n    }\n  });\n\n  const handleEncrypt = async () => {\n    if (\n      !inputMessage.current ||\n      !inputFriendModulus.current ||\n      !inputFriendPublicExponent.current ||\n      !outputEncryptedMessage.current\n    ) {\n      alert('Something went wrong, please try again later.');\n      return;\n    }\n\n    const message = inputMessage.current.value;\n    if (\n      !message ||\n      message.length === 0 ||\n      !inputFriendModulus.current.value ||\n      inputFriendModulus.current.value.length === 0 ||\n      !inputFriendPublicExponent.current.value ||\n      inputFriendPublicExponent.current.value.length === 0\n    )\n      return;\n    setEncrypting(true);\n    const friendsModulus = hexToDec(inputFriendModulus.current.value);\n    const friendsExponent = hexToDec(inputFriendPublicExponent.current.value);\n    const messageNumber = textToNumber(\n      addPaddingRef.current ? padd(message) : message\n    );\n    if (messageNumber.compareTo(friendsModulus) >= 0) {\n      alert(`This message is too long to encrypt.`);\n      setEncrypting(false);\n      return;\n    }\n    const cipher = messageNumber.modPow(friendsExponent, friendsModulus);\n    setTimeout(() => {\n      outputEncryptedMessage.current!.innerHTML = decToHex(cipher);\n      setEncrypting(false);\n    }, 1000);\n  };\n\n  const handleDecrypt = () => {\n    setDecrypting(true);\n    if (!inputEncryptedMessage.current || !outputDecryptedMessage.current) {\n      alert('Something went wrong, please try again later.');\n      setDecrypting(false);\n      return;\n    }\n    const encryptedMessage = inputEncryptedMessage.current.value;\n    if (!encryptedMessage || encryptedMessage.length === 0) return;\n    const message = hexToDec(encryptedMessage).modPow(d.current, n.current);\n    setTimeout(() => {\n      const messageText = numberToText(message.toString());\n      const decryptedMessage = removePaddingRef.current\n        ? unpadd(messageText)\n        : messageText;\n\n      outputDecryptedMessage.current!.innerHTML = decryptedMessage;\n      setDecrypting(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"App\">\n      <img\n        src=\"/rsa/images/background.png\"\n        alt=\"Background\"\n        className=\"background\"\n      />\n      <div className=\"main\">\n        <h1>RSA encryption</h1>\n        <hr />\n        <div className=\"text-center text\">\n          <div className=\"text padding-y\">\n            <label>P and Q length(digits): </label>\n            <input\n              type=\"number\"\n              value={pqLength}\n              min={5}\n              max={500}\n              onChange={(e) => setPQLength(parseInt(e.target.value))}\n            />\n          </div>\n          <div className=\"text padding-y\">\n            <button onClick={() => setShowDecimalValues(!showDecimalValues)}>\n              Show {showDecimalValues ? 'hex' : 'decimal'} values\n            </button>\n          </div>\n          <p>\n            <b>Your private exponent:</b>\n          </p>\n          <textarea\n            ref={privateExponentDisplay}\n            className=\"key-view\"\n            readOnly={true}\n          ></textarea>\n        </div>\n        <div className=\"text-center text\">\n          <p>\n            <b>Your public exponent:</b>\n          </p>\n          <textarea\n            ref={publicExponentDispay}\n            className=\"key-view\"\n            readOnly={true}\n          ></textarea>\n        </div>\n        <div className=\"text-center text\">\n          <p>\n            <b>Modulus:</b>\n          </p>\n          <textarea\n            ref={modulusDisplay}\n            className=\"key-view\"\n            readOnly={true}\n          ></textarea>\n        </div>\n        <hr />\n        <div className=\"wraper\">\n          <div className=\"side\">\n            <div className=\"inner-wrapper\">\n              <h3>Encrypt:</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"message\">Message:</label>\n                <textarea name=\"message\" ref={inputMessage} rows={6}></textarea>\n              </div>\n              <div className=\"form-group\">\n                <label>Friends modulus(hex):</label>\n                <input\n                  type=\"text\"\n                  ref={inputFriendModulus}\n                  placeholder=\"modulus\"\n                />\n                <label>Friends public exponent(hex):</label>\n                <input\n                  type=\"text\"\n                  ref={inputFriendPublicExponent}\n                  placeholder=\"public exponent\"\n                />\n              </div>\n              <div className=\"center\">\n                <div className=\"text padding-y\">\n                  <label htmlFor=\"add-padding-checkbox\">Add padding: </label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"add-padding-checkbox\"\n                    checked={addPaddnig}\n                    onChange={() => setAddPadding(!addPaddnig)}\n                  />\n                </div>\n                <button onClick={handleEncrypt}>\n                  {encrypting && <ClipLoader size={10} />} encrypt\n                </button>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"encrypted-message\">\n                  Encrypted message(hex):\n                </label>\n                <textarea\n                  name=\"encrypted-message\"\n                  ref={outputEncryptedMessage}\n                  rows={6}\n                  readOnly={true}\n                ></textarea>\n              </div>\n            </div>\n          </div>\n          <div className=\"side\">\n            <div className=\"inner-wrapper\">\n              <h3>Decrypt:</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"message\">Encrypted message(hex):</label>\n                <textarea\n                  name=\"message\"\n                  ref={inputEncryptedMessage}\n                  rows={6}\n                ></textarea>\n              </div>\n              <div className=\"center\">\n                <div className=\"text padding-y\">\n                  <label htmlFor=\"remove-padding-checkbox\">\n                    Remove padding:\n                  </label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"remove-padding-checkbox\"\n                    checked={removePadding}\n                    onChange={() => setRemovePadding(!removePadding)}\n                  />\n                </div>\n                <button onClick={handleDecrypt} className=\"btn\">\n                  {decrypting && <ClipLoader size={10} />}\n                  decrypt\n                </button>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"encrypted-message\">Decrypted message:</label>\n                <textarea\n                  name=\"encrypted-message\"\n                  ref={outputDecryptedMessage}\n                  rows={6}\n                  readOnly={true}\n                ></textarea>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}